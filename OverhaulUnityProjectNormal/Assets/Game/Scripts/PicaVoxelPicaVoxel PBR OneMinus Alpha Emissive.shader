Shader "PicaVoxel/PicaVoxel PBR OneMinus Alpha Emissive" {
	Properties {
		_Metallic ("Metallic", Range(0, 1)) = 0
		_Gloss ("Gloss", Range(0, 1)) = 0.8
		_GlowAmount ("Glow Amount", Range(1, 100)) = 1
		_Tint ("Tint", Vector) = (1,1,1,1)
	}
	SubShader {
		Tags { "RenderType" = "Opaque" }
		Pass {
			Name "FORWARD"
			Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			GpuProgramID 15434
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat22;
					vec2 u_xlat24;
					float u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat34 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat2.xyz);
					    u_xlat34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat33 = _Gloss * 10.0 + 1.0;
					    u_xlat11.z = exp2(u_xlat33);
					    u_xlat34 = (-_Gloss) + 1.0;
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat35 = u_xlat34 * 0.797884583;
					    u_xlat6.xy = (-vec2(u_xlat34)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat36 = u_xlat34 * u_xlat6.x;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = u_xlat5.w + -1.0;
					    u_xlat37 = unity_SpecCube0_HDR.w * u_xlat37 + 1.0;
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xzw = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = u_xlat3.w + -1.0;
					        u_xlat36 = unity_SpecCube1_HDR.w * u_xlat36 + 1.0;
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xzw = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat5.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = vec3(_Metallic) * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y + u_xlat35;
					    u_xlat22 = u_xlat2.x * u_xlat6.y + u_xlat35;
					    u_xlat11.x = u_xlat11.x * u_xlat22 + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat22 = u_xlat34 * u_xlat34;
					    u_xlat0.z = u_xlat22 * u_xlat22;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat22 = 2.0 / u_xlat0.z;
					    u_xlat22 = u_xlat22 + -2.0;
					    u_xlat22 = max(u_xlat22, 9.99999975e-05);
					    u_xlat1.x = u_xlat22 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat22 = u_xlat0.x * u_xlat22;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat0.z = u_xlat1.x * u_xlat22;
					    u_xlat11.x = u_xlat11.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat11.zx;
					    u_xlat11.x = u_xlat0.y * 0.785398185;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat11.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat33 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					    u_xlat33 = u_xlat25 + _Gloss;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat24.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat24.xy = u_xlat24.xy * u_xlat24.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat24.xy;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(u_xlat33);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat6.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat33 = u_xlat3.y + u_xlat3.y;
					    u_xlat33 = u_xlat3.y * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat34 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = u_xlat33 * u_xlat1.x + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat2.y + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat33 = u_xlat3.x * u_xlat33;
					    u_xlat1.xyz = vec3(u_xlat33) * _LightColor0.xyz;
					    u_xlat33 = (-vs_COLOR0.w) + 1.0;
					    u_xlat33 = u_xlat33 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat17;
					float u_xlat24;
					vec2 u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat4.xyz = vec3(u_xlat38) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat4.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = _Gloss * 10.0 + 1.0;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat38 = (-_Gloss) + 1.0;
					    u_xlatb39 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb39){
					        u_xlatb39 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat39 = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat39 = max(u_xlat39, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat39);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat0);
					        u_xlat6.y = dot(u_xlat7, u_xlat0);
					        u_xlat6.z = dot(u_xlat5, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat0);
					        u_xlat6.y = dot(unity_SHAg, u_xlat0);
					        u_xlat6.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD9.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat6.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat36 = min(u_xlat7.z, u_xlat36);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = u_xlat38 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat38)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat38 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = u_xlat27.xxx * u_xlat4.xyz;
					    u_xlat27.x = (-u_xlat27.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat36;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat24 = u_xlat38 * u_xlat38;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat12.z = u_xlat24 + 2.0;
					    u_xlat12.xz = u_xlat12.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat12.z * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat12.x = u_xlat24 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat37;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27.x + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat27.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat27.xy = u_xlat27.xy * u_xlat27.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat27.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat38 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = vec3(u_xlat36) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat24;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat37 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat37)) + (-u_xlat2.xyz);
					    u_xlat37 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat4.xyz = vec3(u_xlat37) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat4.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat36 = _Gloss * 10.0 + 1.0;
					    u_xlat12.z = exp2(u_xlat36);
					    u_xlat37 = (-_Gloss) + 1.0;
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat38 = u_xlat37 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat37)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat37 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat38;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat38;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlat24 = u_xlat37 * u_xlat37;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat1.x = u_xlat24 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat0.z = u_xlat1.x * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat12.zx;
					    u_xlat12.x = u_xlat0.y * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27 + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat26.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat26.xy = u_xlat26.xy * u_xlat26.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat26.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat37 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat36);
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat26;
					vec2 u_xlat29;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat41 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat41 = u_xlat41 + u_xlat41;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat41)) + (-u_xlat2.xyz);
					    u_xlat41 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat4.xyz = vec3(u_xlat41) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat4.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat40 = _Gloss * 10.0 + 1.0;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat41 = (-_Gloss) + 1.0;
					    u_xlatb42 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb42){
					        u_xlatb42 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat42 = u_xlat6.y * 0.25;
					        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat42 = max(u_xlat42, u_xlat43);
					        u_xlat6.x = min(u_xlat44, u_xlat42);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat0);
					        u_xlat7.y = dot(u_xlat8, u_xlat0);
					        u_xlat7.z = dot(u_xlat6, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat0);
					        u_xlat7.y = dot(unity_SHAg, u_xlat0);
					        u_xlat7.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat7.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat39 = min(u_xlat8.z, u_xlat39);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat3.xyz;
					    }
					    u_xlat39 = u_xlat41 * 0.797884583;
					    u_xlat8.xy = (-vec2(u_xlat41)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat42 = u_xlat41 * u_xlat8.x;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat43 = u_xlat7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat43 + 1.0;
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xzw = u_xlat7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat3.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat42);
					        u_xlat42 = u_xlat3.w + -1.0;
					        u_xlat42 = unity_SpecCube1_HDR.w * u_xlat42 + 1.0;
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + (-u_xlat3.xyz);
					        u_xlat8.xzw = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat7.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = vec3(_Metallic) * u_xlat7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat29.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = u_xlat29.xxx * u_xlat4.xyz;
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat13.x = u_xlat3.x * u_xlat8.y + u_xlat39;
					    u_xlat26 = u_xlat2.x * u_xlat8.y + u_xlat39;
					    u_xlat13.x = u_xlat13.x * u_xlat26 + 9.99999975e-06;
					    u_xlat13.x = float(1.0) / u_xlat13.x;
					    u_xlat26 = u_xlat41 * u_xlat41;
					    u_xlat0.z = u_xlat26 * u_xlat26;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat26 = 2.0 / u_xlat0.z;
					    u_xlat26 = u_xlat26 + -2.0;
					    u_xlat26 = max(u_xlat26, 9.99999975e-05);
					    u_xlat13.z = u_xlat26 + 2.0;
					    u_xlat13.xz = u_xlat13.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat26 = u_xlat0.x * u_xlat26;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat26 = u_xlat13.z * u_xlat26;
					    u_xlat13.x = u_xlat13.x * u_xlat3.x;
					    u_xlat13.x = u_xlat26 * u_xlat13.x;
					    u_xlat13.x = u_xlat13.x * 0.785398185;
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat40;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat39 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    u_xlat39 = u_xlat29.x + _Gloss;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat29.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat29.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat29.xy;
					    u_xlat10.xyz = (-u_xlat7.xyz) + vec3(u_xlat39);
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat10.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat39 = u_xlat3.y + u_xlat3.y;
					    u_xlat39 = u_xlat3.y * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat41 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat14 = u_xlat1.x * u_xlat1.x;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat1.x = u_xlat14 * u_xlat1.x;
					    u_xlat1.x = u_xlat39 * u_xlat1.x + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat2.y + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat3.x * u_xlat39;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat5.xyz + u_xlat6.xyz;
					    u_xlat39 = (-vs_COLOR0.w) + 1.0;
					    u_xlat39 = u_xlat39 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat9.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat22;
					vec2 u_xlat24;
					float u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat34 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat2.xyz);
					    u_xlat34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat33 = _Gloss * 10.0 + 1.0;
					    u_xlat11.z = exp2(u_xlat33);
					    u_xlat34 = (-_Gloss) + 1.0;
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat35 = u_xlat34 * 0.797884583;
					    u_xlat6.xy = (-vec2(u_xlat34)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat36 = u_xlat34 * u_xlat6.x;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = u_xlat5.w + -1.0;
					    u_xlat37 = unity_SpecCube0_HDR.w * u_xlat37 + 1.0;
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xzw = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = u_xlat3.w + -1.0;
					        u_xlat36 = unity_SpecCube1_HDR.w * u_xlat36 + 1.0;
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xzw = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat5.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = vec3(_Metallic) * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y + u_xlat35;
					    u_xlat22 = u_xlat2.x * u_xlat6.y + u_xlat35;
					    u_xlat11.x = u_xlat11.x * u_xlat22 + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat22 = u_xlat34 * u_xlat34;
					    u_xlat0.z = u_xlat22 * u_xlat22;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat22 = 2.0 / u_xlat0.z;
					    u_xlat22 = u_xlat22 + -2.0;
					    u_xlat22 = max(u_xlat22, 9.99999975e-05);
					    u_xlat1.x = u_xlat22 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat22 = u_xlat0.x * u_xlat22;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat0.z = u_xlat1.x * u_xlat22;
					    u_xlat11.x = u_xlat11.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat11.zx;
					    u_xlat11.x = u_xlat0.y * 0.785398185;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat11.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat33 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					    u_xlat33 = u_xlat25 + _Gloss;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat24.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat24.xy = u_xlat24.xy * u_xlat24.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat24.xy;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(u_xlat33);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat6.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat33 = u_xlat3.y + u_xlat3.y;
					    u_xlat33 = u_xlat3.y * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat34 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = u_xlat33 * u_xlat1.x + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat2.y + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat33 = u_xlat3.x * u_xlat33;
					    u_xlat1.xyz = vec3(u_xlat33) * _LightColor0.xyz;
					    u_xlat33 = (-vs_COLOR0.w) + 1.0;
					    u_xlat33 = u_xlat33 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * _ProjectionParams.z;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = u_xlat33 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat17;
					float u_xlat24;
					vec2 u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat4.xyz = vec3(u_xlat38) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat4.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = _Gloss * 10.0 + 1.0;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat38 = (-_Gloss) + 1.0;
					    u_xlatb39 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb39){
					        u_xlatb39 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat39 = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat39 = max(u_xlat39, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat39);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat0);
					        u_xlat6.y = dot(u_xlat7, u_xlat0);
					        u_xlat6.z = dot(u_xlat5, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat0);
					        u_xlat6.y = dot(unity_SHAg, u_xlat0);
					        u_xlat6.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD9.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat6.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat36 = min(u_xlat7.z, u_xlat36);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = u_xlat38 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat38)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat38 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = u_xlat27.xxx * u_xlat4.xyz;
					    u_xlat27.x = (-u_xlat27.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat36;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat24 = u_xlat38 * u_xlat38;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat12.z = u_xlat24 + 2.0;
					    u_xlat12.xz = u_xlat12.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat12.z * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat12.x = u_xlat24 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat37;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27.x + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat27.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat27.xy = u_xlat27.xy * u_xlat27.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat27.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat38 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = vec3(u_xlat36) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * _ProjectionParams.z;
					    u_xlat36 = max(u_xlat36, 0.0);
					    u_xlat36 = u_xlat36 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat24;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat37 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat37)) + (-u_xlat2.xyz);
					    u_xlat37 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat4.xyz = vec3(u_xlat37) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat4.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat36 = _Gloss * 10.0 + 1.0;
					    u_xlat12.z = exp2(u_xlat36);
					    u_xlat37 = (-_Gloss) + 1.0;
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat38 = u_xlat37 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat37)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat37 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat38;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat38;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlat24 = u_xlat37 * u_xlat37;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat1.x = u_xlat24 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat0.z = u_xlat1.x * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat12.zx;
					    u_xlat12.x = u_xlat0.y * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27 + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat26.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat26.xy = u_xlat26.xy * u_xlat26.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat26.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat37 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat36);
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * _ProjectionParams.z;
					    u_xlat36 = max(u_xlat36, 0.0);
					    u_xlat36 = u_xlat36 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat26;
					vec2 u_xlat29;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat41 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat41 = u_xlat41 + u_xlat41;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat41)) + (-u_xlat2.xyz);
					    u_xlat41 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat4.xyz = vec3(u_xlat41) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat4.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat40 = _Gloss * 10.0 + 1.0;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat41 = (-_Gloss) + 1.0;
					    u_xlatb42 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb42){
					        u_xlatb42 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat42 = u_xlat6.y * 0.25;
					        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat42 = max(u_xlat42, u_xlat43);
					        u_xlat6.x = min(u_xlat44, u_xlat42);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat0);
					        u_xlat7.y = dot(u_xlat8, u_xlat0);
					        u_xlat7.z = dot(u_xlat6, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat0);
					        u_xlat7.y = dot(unity_SHAg, u_xlat0);
					        u_xlat7.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat7.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat39 = min(u_xlat8.z, u_xlat39);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat3.xyz;
					    }
					    u_xlat39 = u_xlat41 * 0.797884583;
					    u_xlat8.xy = (-vec2(u_xlat41)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat42 = u_xlat41 * u_xlat8.x;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat43 = u_xlat7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat43 + 1.0;
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xzw = u_xlat7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat3.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat42);
					        u_xlat42 = u_xlat3.w + -1.0;
					        u_xlat42 = unity_SpecCube1_HDR.w * u_xlat42 + 1.0;
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + (-u_xlat3.xyz);
					        u_xlat8.xzw = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat7.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = vec3(_Metallic) * u_xlat7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat29.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = u_xlat29.xxx * u_xlat4.xyz;
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat13.x = u_xlat3.x * u_xlat8.y + u_xlat39;
					    u_xlat26 = u_xlat2.x * u_xlat8.y + u_xlat39;
					    u_xlat13.x = u_xlat13.x * u_xlat26 + 9.99999975e-06;
					    u_xlat13.x = float(1.0) / u_xlat13.x;
					    u_xlat26 = u_xlat41 * u_xlat41;
					    u_xlat0.z = u_xlat26 * u_xlat26;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat26 = 2.0 / u_xlat0.z;
					    u_xlat26 = u_xlat26 + -2.0;
					    u_xlat26 = max(u_xlat26, 9.99999975e-05);
					    u_xlat13.z = u_xlat26 + 2.0;
					    u_xlat13.xz = u_xlat13.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat26 = u_xlat0.x * u_xlat26;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat26 = u_xlat13.z * u_xlat26;
					    u_xlat13.x = u_xlat13.x * u_xlat3.x;
					    u_xlat13.x = u_xlat26 * u_xlat13.x;
					    u_xlat13.x = u_xlat13.x * 0.785398185;
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat40;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat39 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    u_xlat39 = u_xlat29.x + _Gloss;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat29.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat29.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat29.xy;
					    u_xlat10.xyz = (-u_xlat7.xyz) + vec3(u_xlat39);
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat10.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat39 = u_xlat3.y + u_xlat3.y;
					    u_xlat39 = u_xlat3.y * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat41 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat14 = u_xlat1.x * u_xlat1.x;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat1.x = u_xlat14 * u_xlat1.x;
					    u_xlat1.x = u_xlat39 * u_xlat1.x + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat2.y + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat3.x * u_xlat39;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat5.xyz + u_xlat6.xyz;
					    u_xlat39 = (-vs_COLOR0.w) + 1.0;
					    u_xlat39 = u_xlat39 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat9.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    u_xlat39 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * _ProjectionParams.z;
					    u_xlat39 = max(u_xlat39, 0.0);
					    u_xlat39 = u_xlat39 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat22;
					vec2 u_xlat24;
					float u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat34 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat2.xyz);
					    u_xlat34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat33 = _Gloss * 10.0 + 1.0;
					    u_xlat11.z = exp2(u_xlat33);
					    u_xlat34 = (-_Gloss) + 1.0;
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat35 = u_xlat34 * 0.797884583;
					    u_xlat6.xy = (-vec2(u_xlat34)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat36 = u_xlat34 * u_xlat6.x;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = u_xlat5.w + -1.0;
					    u_xlat37 = unity_SpecCube0_HDR.w * u_xlat37 + 1.0;
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xzw = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = u_xlat3.w + -1.0;
					        u_xlat36 = unity_SpecCube1_HDR.w * u_xlat36 + 1.0;
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xzw = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat5.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = vec3(_Metallic) * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y + u_xlat35;
					    u_xlat22 = u_xlat2.x * u_xlat6.y + u_xlat35;
					    u_xlat11.x = u_xlat11.x * u_xlat22 + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat22 = u_xlat34 * u_xlat34;
					    u_xlat0.z = u_xlat22 * u_xlat22;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat22 = 2.0 / u_xlat0.z;
					    u_xlat22 = u_xlat22 + -2.0;
					    u_xlat22 = max(u_xlat22, 9.99999975e-05);
					    u_xlat1.x = u_xlat22 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat22 = u_xlat0.x * u_xlat22;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat0.z = u_xlat1.x * u_xlat22;
					    u_xlat11.x = u_xlat11.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat11.zx;
					    u_xlat11.x = u_xlat0.y * 0.785398185;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat11.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat33 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					    u_xlat33 = u_xlat25 + _Gloss;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat24.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat24.xy = u_xlat24.xy * u_xlat24.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat24.xy;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(u_xlat33);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat6.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat33 = u_xlat3.y + u_xlat3.y;
					    u_xlat33 = u_xlat3.y * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat34 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = u_xlat33 * u_xlat1.x + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat2.y + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat33 = u_xlat3.x * u_xlat33;
					    u_xlat1.xyz = vec3(u_xlat33) * _LightColor0.xyz;
					    u_xlat33 = (-vs_COLOR0.w) + 1.0;
					    u_xlat33 = u_xlat33 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat17;
					float u_xlat24;
					vec2 u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat4.xyz = vec3(u_xlat38) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat4.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = _Gloss * 10.0 + 1.0;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat38 = (-_Gloss) + 1.0;
					    u_xlatb39 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb39){
					        u_xlatb39 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat39 = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat39 = max(u_xlat39, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat39);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat0);
					        u_xlat6.y = dot(u_xlat7, u_xlat0);
					        u_xlat6.z = dot(u_xlat5, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat0);
					        u_xlat6.y = dot(unity_SHAg, u_xlat0);
					        u_xlat6.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD9.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat6.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat36 = min(u_xlat7.z, u_xlat36);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = u_xlat38 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat38)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat38 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = u_xlat27.xxx * u_xlat4.xyz;
					    u_xlat27.x = (-u_xlat27.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat36;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat24 = u_xlat38 * u_xlat38;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat12.z = u_xlat24 + 2.0;
					    u_xlat12.xz = u_xlat12.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat12.z * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat12.x = u_xlat24 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat37;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27.x + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat27.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat27.xy = u_xlat27.xy * u_xlat27.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat27.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat38 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = vec3(u_xlat36) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat24;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat37 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat37)) + (-u_xlat2.xyz);
					    u_xlat37 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat4.xyz = vec3(u_xlat37) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat4.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat36 = _Gloss * 10.0 + 1.0;
					    u_xlat12.z = exp2(u_xlat36);
					    u_xlat37 = (-_Gloss) + 1.0;
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat38 = u_xlat37 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat37)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat37 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat38;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat38;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlat24 = u_xlat37 * u_xlat37;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat1.x = u_xlat24 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat0.z = u_xlat1.x * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat12.zx;
					    u_xlat12.x = u_xlat0.y * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27 + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat26.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat26.xy = u_xlat26.xy * u_xlat26.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat26.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat37 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat36);
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat26;
					vec2 u_xlat29;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat41 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat41 = u_xlat41 + u_xlat41;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat41)) + (-u_xlat2.xyz);
					    u_xlat41 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat4.xyz = vec3(u_xlat41) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat4.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat40 = _Gloss * 10.0 + 1.0;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat41 = (-_Gloss) + 1.0;
					    u_xlatb42 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb42){
					        u_xlatb42 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat42 = u_xlat6.y * 0.25;
					        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat42 = max(u_xlat42, u_xlat43);
					        u_xlat6.x = min(u_xlat44, u_xlat42);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat0);
					        u_xlat7.y = dot(u_xlat8, u_xlat0);
					        u_xlat7.z = dot(u_xlat6, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat0);
					        u_xlat7.y = dot(unity_SHAg, u_xlat0);
					        u_xlat7.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat7.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat39 = min(u_xlat8.z, u_xlat39);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat3.xyz;
					    }
					    u_xlat39 = u_xlat41 * 0.797884583;
					    u_xlat8.xy = (-vec2(u_xlat41)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat42 = u_xlat41 * u_xlat8.x;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat43 = u_xlat7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat43 + 1.0;
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xzw = u_xlat7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat3.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat42);
					        u_xlat42 = u_xlat3.w + -1.0;
					        u_xlat42 = unity_SpecCube1_HDR.w * u_xlat42 + 1.0;
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + (-u_xlat3.xyz);
					        u_xlat8.xzw = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat7.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = vec3(_Metallic) * u_xlat7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat29.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = u_xlat29.xxx * u_xlat4.xyz;
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat13.x = u_xlat3.x * u_xlat8.y + u_xlat39;
					    u_xlat26 = u_xlat2.x * u_xlat8.y + u_xlat39;
					    u_xlat13.x = u_xlat13.x * u_xlat26 + 9.99999975e-06;
					    u_xlat13.x = float(1.0) / u_xlat13.x;
					    u_xlat26 = u_xlat41 * u_xlat41;
					    u_xlat0.z = u_xlat26 * u_xlat26;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat26 = 2.0 / u_xlat0.z;
					    u_xlat26 = u_xlat26 + -2.0;
					    u_xlat26 = max(u_xlat26, 9.99999975e-05);
					    u_xlat13.z = u_xlat26 + 2.0;
					    u_xlat13.xz = u_xlat13.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat26 = u_xlat0.x * u_xlat26;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat26 = u_xlat13.z * u_xlat26;
					    u_xlat13.x = u_xlat13.x * u_xlat3.x;
					    u_xlat13.x = u_xlat26 * u_xlat13.x;
					    u_xlat13.x = u_xlat13.x * 0.785398185;
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat40;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat39 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    u_xlat39 = u_xlat29.x + _Gloss;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat29.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat29.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat29.xy;
					    u_xlat10.xyz = (-u_xlat7.xyz) + vec3(u_xlat39);
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat10.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat39 = u_xlat3.y + u_xlat3.y;
					    u_xlat39 = u_xlat3.y * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat41 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat14 = u_xlat1.x * u_xlat1.x;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat1.x = u_xlat14 * u_xlat1.x;
					    u_xlat1.x = u_xlat39 * u_xlat1.x + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat2.y + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat3.x * u_xlat39;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat5.xyz + u_xlat6.xyz;
					    u_xlat39 = (-vs_COLOR0.w) + 1.0;
					    u_xlat39 = u_xlat39 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat9.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat22;
					vec2 u_xlat24;
					float u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat34 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat2.xyz);
					    u_xlat34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat33 = _Gloss * 10.0 + 1.0;
					    u_xlat11.z = exp2(u_xlat33);
					    u_xlat34 = (-_Gloss) + 1.0;
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat35 = u_xlat34 * 0.797884583;
					    u_xlat6.xy = (-vec2(u_xlat34)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat36 = u_xlat34 * u_xlat6.x;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = u_xlat5.w + -1.0;
					    u_xlat37 = unity_SpecCube0_HDR.w * u_xlat37 + 1.0;
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xzw = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = u_xlat3.w + -1.0;
					        u_xlat36 = unity_SpecCube1_HDR.w * u_xlat36 + 1.0;
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xzw = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat5.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = vec3(_Metallic) * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y + u_xlat35;
					    u_xlat22 = u_xlat2.x * u_xlat6.y + u_xlat35;
					    u_xlat11.x = u_xlat11.x * u_xlat22 + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat22 = u_xlat34 * u_xlat34;
					    u_xlat0.z = u_xlat22 * u_xlat22;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat22 = 2.0 / u_xlat0.z;
					    u_xlat22 = u_xlat22 + -2.0;
					    u_xlat22 = max(u_xlat22, 9.99999975e-05);
					    u_xlat1.x = u_xlat22 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat22 = u_xlat0.x * u_xlat22;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat0.z = u_xlat1.x * u_xlat22;
					    u_xlat11.x = u_xlat11.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat11.zx;
					    u_xlat11.x = u_xlat0.y * 0.785398185;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat11.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat33 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					    u_xlat33 = u_xlat25 + _Gloss;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat24.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat24.xy = u_xlat24.xy * u_xlat24.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat24.xy;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(u_xlat33);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat6.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat33 = u_xlat3.y + u_xlat3.y;
					    u_xlat33 = u_xlat3.y * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat34 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = u_xlat33 * u_xlat1.x + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat2.y + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat33 = u_xlat3.x * u_xlat33;
					    u_xlat1.xyz = vec3(u_xlat33) * _LightColor0.xyz;
					    u_xlat33 = (-vs_COLOR0.w) + 1.0;
					    u_xlat33 = u_xlat33 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * _ProjectionParams.z;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = u_xlat33 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat17;
					float u_xlat24;
					vec2 u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat4.xyz = vec3(u_xlat38) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat4.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = _Gloss * 10.0 + 1.0;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat38 = (-_Gloss) + 1.0;
					    u_xlatb39 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb39){
					        u_xlatb39 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat39 = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat39 = max(u_xlat39, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat39);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat0);
					        u_xlat6.y = dot(u_xlat7, u_xlat0);
					        u_xlat6.z = dot(u_xlat5, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat0);
					        u_xlat6.y = dot(unity_SHAg, u_xlat0);
					        u_xlat6.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD9.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat6.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat36 = min(u_xlat7.z, u_xlat36);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = u_xlat38 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat38)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat38 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = u_xlat27.xxx * u_xlat4.xyz;
					    u_xlat27.x = (-u_xlat27.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat36;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat24 = u_xlat38 * u_xlat38;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat12.z = u_xlat24 + 2.0;
					    u_xlat12.xz = u_xlat12.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat12.z * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat12.x = u_xlat24 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat37;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27.x + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat27.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat27.xy = u_xlat27.xy * u_xlat27.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat27.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat38 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = vec3(u_xlat36) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * _ProjectionParams.z;
					    u_xlat36 = max(u_xlat36, 0.0);
					    u_xlat36 = u_xlat36 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat24;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat37 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat37)) + (-u_xlat2.xyz);
					    u_xlat37 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat4.xyz = vec3(u_xlat37) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat4.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat36 = _Gloss * 10.0 + 1.0;
					    u_xlat12.z = exp2(u_xlat36);
					    u_xlat37 = (-_Gloss) + 1.0;
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat38 = u_xlat37 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat37)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat37 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat38;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat38;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlat24 = u_xlat37 * u_xlat37;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat1.x = u_xlat24 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat0.z = u_xlat1.x * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat12.zx;
					    u_xlat12.x = u_xlat0.y * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27 + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat26.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat26.xy = u_xlat26.xy * u_xlat26.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat26.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat37 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat36);
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * _ProjectionParams.z;
					    u_xlat36 = max(u_xlat36, 0.0);
					    u_xlat36 = u_xlat36 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat26;
					vec2 u_xlat29;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat41 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat41 = u_xlat41 + u_xlat41;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat41)) + (-u_xlat2.xyz);
					    u_xlat41 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat4.xyz = vec3(u_xlat41) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat4.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat40 = _Gloss * 10.0 + 1.0;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat41 = (-_Gloss) + 1.0;
					    u_xlatb42 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb42){
					        u_xlatb42 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat42 = u_xlat6.y * 0.25;
					        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat42 = max(u_xlat42, u_xlat43);
					        u_xlat6.x = min(u_xlat44, u_xlat42);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat0);
					        u_xlat7.y = dot(u_xlat8, u_xlat0);
					        u_xlat7.z = dot(u_xlat6, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat0);
					        u_xlat7.y = dot(unity_SHAg, u_xlat0);
					        u_xlat7.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat7.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat39 = min(u_xlat8.z, u_xlat39);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat3.xyz;
					    }
					    u_xlat39 = u_xlat41 * 0.797884583;
					    u_xlat8.xy = (-vec2(u_xlat41)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat42 = u_xlat41 * u_xlat8.x;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat43 = u_xlat7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat43 + 1.0;
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xzw = u_xlat7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat3.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat42);
					        u_xlat42 = u_xlat3.w + -1.0;
					        u_xlat42 = unity_SpecCube1_HDR.w * u_xlat42 + 1.0;
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + (-u_xlat3.xyz);
					        u_xlat8.xzw = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat7.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = vec3(_Metallic) * u_xlat7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat29.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = u_xlat29.xxx * u_xlat4.xyz;
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat13.x = u_xlat3.x * u_xlat8.y + u_xlat39;
					    u_xlat26 = u_xlat2.x * u_xlat8.y + u_xlat39;
					    u_xlat13.x = u_xlat13.x * u_xlat26 + 9.99999975e-06;
					    u_xlat13.x = float(1.0) / u_xlat13.x;
					    u_xlat26 = u_xlat41 * u_xlat41;
					    u_xlat0.z = u_xlat26 * u_xlat26;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat26 = 2.0 / u_xlat0.z;
					    u_xlat26 = u_xlat26 + -2.0;
					    u_xlat26 = max(u_xlat26, 9.99999975e-05);
					    u_xlat13.z = u_xlat26 + 2.0;
					    u_xlat13.xz = u_xlat13.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat26 = u_xlat0.x * u_xlat26;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat26 = u_xlat13.z * u_xlat26;
					    u_xlat13.x = u_xlat13.x * u_xlat3.x;
					    u_xlat13.x = u_xlat26 * u_xlat13.x;
					    u_xlat13.x = u_xlat13.x * 0.785398185;
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat40;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat39 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    u_xlat39 = u_xlat29.x + _Gloss;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat29.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat29.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat29.xy;
					    u_xlat10.xyz = (-u_xlat7.xyz) + vec3(u_xlat39);
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat10.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat39 = u_xlat3.y + u_xlat3.y;
					    u_xlat39 = u_xlat3.y * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat41 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat14 = u_xlat1.x * u_xlat1.x;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat1.x = u_xlat14 * u_xlat1.x;
					    u_xlat1.x = u_xlat39 * u_xlat1.x + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat2.y + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat3.x * u_xlat39;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat5.xyz + u_xlat6.xyz;
					    u_xlat39 = (-vs_COLOR0.w) + 1.0;
					    u_xlat39 = u_xlat39 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat9.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    u_xlat39 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * _ProjectionParams.z;
					    u_xlat39 = max(u_xlat39, 0.0);
					    u_xlat39 = u_xlat39 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat22;
					vec2 u_xlat24;
					float u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat34 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat2.xyz);
					    u_xlat34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat33 = _Gloss * 10.0 + 1.0;
					    u_xlat11.z = exp2(u_xlat33);
					    u_xlat34 = (-_Gloss) + 1.0;
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat35 = u_xlat34 * 0.797884583;
					    u_xlat6.xy = (-vec2(u_xlat34)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat36 = u_xlat34 * u_xlat6.x;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = u_xlat5.w + -1.0;
					    u_xlat37 = unity_SpecCube0_HDR.w * u_xlat37 + 1.0;
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xzw = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = u_xlat3.w + -1.0;
					        u_xlat36 = unity_SpecCube1_HDR.w * u_xlat36 + 1.0;
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xzw = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat5.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = vec3(_Metallic) * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y + u_xlat35;
					    u_xlat22 = u_xlat2.x * u_xlat6.y + u_xlat35;
					    u_xlat11.x = u_xlat11.x * u_xlat22 + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat22 = u_xlat34 * u_xlat34;
					    u_xlat0.z = u_xlat22 * u_xlat22;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat22 = 2.0 / u_xlat0.z;
					    u_xlat22 = u_xlat22 + -2.0;
					    u_xlat22 = max(u_xlat22, 9.99999975e-05);
					    u_xlat1.x = u_xlat22 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat22 = u_xlat0.x * u_xlat22;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat0.z = u_xlat1.x * u_xlat22;
					    u_xlat11.x = u_xlat11.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat11.zx;
					    u_xlat11.x = u_xlat0.y * 0.785398185;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat11.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat33 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					    u_xlat33 = u_xlat25 + _Gloss;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat24.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat24.xy = u_xlat24.xy * u_xlat24.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat24.xy;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(u_xlat33);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat6.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat33 = u_xlat3.y + u_xlat3.y;
					    u_xlat33 = u_xlat3.y * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat34 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = u_xlat33 * u_xlat1.x + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat2.y + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat33 = u_xlat3.x * u_xlat33;
					    u_xlat1.xyz = vec3(u_xlat33) * _LightColor0.xyz;
					    u_xlat33 = (-vs_COLOR0.w) + 1.0;
					    u_xlat33 = u_xlat33 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat17;
					float u_xlat24;
					vec2 u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat4.xyz = vec3(u_xlat38) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat4.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = _Gloss * 10.0 + 1.0;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat38 = (-_Gloss) + 1.0;
					    u_xlatb39 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb39){
					        u_xlatb39 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat39 = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat39 = max(u_xlat39, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat39);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat0);
					        u_xlat6.y = dot(u_xlat7, u_xlat0);
					        u_xlat6.z = dot(u_xlat5, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat0);
					        u_xlat6.y = dot(unity_SHAg, u_xlat0);
					        u_xlat6.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD9.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat6.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat36 = min(u_xlat7.z, u_xlat36);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = u_xlat38 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat38)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat38 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = u_xlat27.xxx * u_xlat4.xyz;
					    u_xlat27.x = (-u_xlat27.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat36;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat24 = u_xlat38 * u_xlat38;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat12.z = u_xlat24 + 2.0;
					    u_xlat12.xz = u_xlat12.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat12.z * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat12.x = u_xlat24 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat37;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27.x + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat27.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat27.xy = u_xlat27.xy * u_xlat27.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat27.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat38 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = vec3(u_xlat36) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat24;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat37 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat37)) + (-u_xlat2.xyz);
					    u_xlat37 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat4.xyz = vec3(u_xlat37) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat4.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat36 = _Gloss * 10.0 + 1.0;
					    u_xlat12.z = exp2(u_xlat36);
					    u_xlat37 = (-_Gloss) + 1.0;
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat38 = u_xlat37 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat37)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat37 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat38;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat38;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlat24 = u_xlat37 * u_xlat37;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat1.x = u_xlat24 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat0.z = u_xlat1.x * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat12.zx;
					    u_xlat12.x = u_xlat0.y * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27 + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat26.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat26.xy = u_xlat26.xy * u_xlat26.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat26.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat37 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat36);
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat26;
					vec2 u_xlat29;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat41 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat41 = u_xlat41 + u_xlat41;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat41)) + (-u_xlat2.xyz);
					    u_xlat41 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat4.xyz = vec3(u_xlat41) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat4.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat40 = _Gloss * 10.0 + 1.0;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat41 = (-_Gloss) + 1.0;
					    u_xlatb42 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb42){
					        u_xlatb42 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat42 = u_xlat6.y * 0.25;
					        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat42 = max(u_xlat42, u_xlat43);
					        u_xlat6.x = min(u_xlat44, u_xlat42);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat0);
					        u_xlat7.y = dot(u_xlat8, u_xlat0);
					        u_xlat7.z = dot(u_xlat6, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat0);
					        u_xlat7.y = dot(unity_SHAg, u_xlat0);
					        u_xlat7.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat7.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat39 = min(u_xlat8.z, u_xlat39);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat3.xyz;
					    }
					    u_xlat39 = u_xlat41 * 0.797884583;
					    u_xlat8.xy = (-vec2(u_xlat41)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat42 = u_xlat41 * u_xlat8.x;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat43 = u_xlat7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat43 + 1.0;
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xzw = u_xlat7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat3.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat42);
					        u_xlat42 = u_xlat3.w + -1.0;
					        u_xlat42 = unity_SpecCube1_HDR.w * u_xlat42 + 1.0;
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + (-u_xlat3.xyz);
					        u_xlat8.xzw = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat7.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = vec3(_Metallic) * u_xlat7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat29.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = u_xlat29.xxx * u_xlat4.xyz;
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat13.x = u_xlat3.x * u_xlat8.y + u_xlat39;
					    u_xlat26 = u_xlat2.x * u_xlat8.y + u_xlat39;
					    u_xlat13.x = u_xlat13.x * u_xlat26 + 9.99999975e-06;
					    u_xlat13.x = float(1.0) / u_xlat13.x;
					    u_xlat26 = u_xlat41 * u_xlat41;
					    u_xlat0.z = u_xlat26 * u_xlat26;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat26 = 2.0 / u_xlat0.z;
					    u_xlat26 = u_xlat26 + -2.0;
					    u_xlat26 = max(u_xlat26, 9.99999975e-05);
					    u_xlat13.z = u_xlat26 + 2.0;
					    u_xlat13.xz = u_xlat13.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat26 = u_xlat0.x * u_xlat26;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat26 = u_xlat13.z * u_xlat26;
					    u_xlat13.x = u_xlat13.x * u_xlat3.x;
					    u_xlat13.x = u_xlat26 * u_xlat13.x;
					    u_xlat13.x = u_xlat13.x * 0.785398185;
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat40;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat39 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    u_xlat39 = u_xlat29.x + _Gloss;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat29.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat29.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat29.xy;
					    u_xlat10.xyz = (-u_xlat7.xyz) + vec3(u_xlat39);
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat10.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat39 = u_xlat3.y + u_xlat3.y;
					    u_xlat39 = u_xlat3.y * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat41 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat14 = u_xlat1.x * u_xlat1.x;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat1.x = u_xlat14 * u_xlat1.x;
					    u_xlat1.x = u_xlat39 * u_xlat1.x + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat2.y + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat3.x * u_xlat39;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat5.xyz + u_xlat6.xyz;
					    u_xlat39 = (-vs_COLOR0.w) + 1.0;
					    u_xlat39 = u_xlat39 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat9.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat22;
					vec2 u_xlat24;
					float u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat34 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat2.xyz);
					    u_xlat34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat33 = _Gloss * 10.0 + 1.0;
					    u_xlat11.z = exp2(u_xlat33);
					    u_xlat34 = (-_Gloss) + 1.0;
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat35 = u_xlat34 * 0.797884583;
					    u_xlat6.xy = (-vec2(u_xlat34)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat36 = u_xlat34 * u_xlat6.x;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = u_xlat5.w + -1.0;
					    u_xlat37 = unity_SpecCube0_HDR.w * u_xlat37 + 1.0;
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xzw = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = u_xlat3.w + -1.0;
					        u_xlat36 = unity_SpecCube1_HDR.w * u_xlat36 + 1.0;
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xzw = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat5.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat5.xyz = vec3(_Metallic) * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat25 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y + u_xlat35;
					    u_xlat22 = u_xlat2.x * u_xlat6.y + u_xlat35;
					    u_xlat11.x = u_xlat11.x * u_xlat22 + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat22 = u_xlat34 * u_xlat34;
					    u_xlat0.z = u_xlat22 * u_xlat22;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat22 = 2.0 / u_xlat0.z;
					    u_xlat22 = u_xlat22 + -2.0;
					    u_xlat22 = max(u_xlat22, 9.99999975e-05);
					    u_xlat1.x = u_xlat22 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat22 = u_xlat0.x * u_xlat22;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat0.z = u_xlat1.x * u_xlat22;
					    u_xlat11.x = u_xlat11.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat11.zx;
					    u_xlat11.x = u_xlat0.y * 0.785398185;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat11.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat33 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat5.xyz;
					    u_xlat33 = u_xlat25 + _Gloss;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat24.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat24.xy = u_xlat24.xy * u_xlat24.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat24.xy;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(u_xlat33);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat6.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat33 = u_xlat3.y + u_xlat3.y;
					    u_xlat33 = u_xlat3.y * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat34 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = u_xlat33 * u_xlat1.x + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat2.y + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat33 = u_xlat3.x * u_xlat33;
					    u_xlat1.xyz = vec3(u_xlat33) * _LightColor0.xyz;
					    u_xlat33 = (-vs_COLOR0.w) + 1.0;
					    u_xlat33 = u_xlat33 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * _ProjectionParams.z;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = u_xlat33 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat17;
					float u_xlat24;
					vec2 u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat4.xyz = vec3(u_xlat38) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat4.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = _Gloss * 10.0 + 1.0;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat38 = (-_Gloss) + 1.0;
					    u_xlatb39 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb39){
					        u_xlatb39 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat39 = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat39 = max(u_xlat39, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat39);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat0);
					        u_xlat6.y = dot(u_xlat7, u_xlat0);
					        u_xlat6.z = dot(u_xlat5, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat0);
					        u_xlat6.y = dot(unity_SHAg, u_xlat0);
					        u_xlat6.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD9.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat6.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat36 = min(u_xlat7.z, u_xlat36);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = u_xlat38 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat38)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat38 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = u_xlat27.xxx * u_xlat4.xyz;
					    u_xlat27.x = (-u_xlat27.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat36;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat24 = u_xlat38 * u_xlat38;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat12.z = u_xlat24 + 2.0;
					    u_xlat12.xz = u_xlat12.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = u_xlat12.z * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat12.x = u_xlat24 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat37;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27.x + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat27.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat27.xy = u_xlat27.xy * u_xlat27.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat27.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat38 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = vec3(u_xlat36) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * _ProjectionParams.z;
					    u_xlat36 = max(u_xlat36, 0.0);
					    u_xlat36 = u_xlat36 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat24;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat37 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat37)) + (-u_xlat2.xyz);
					    u_xlat37 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat4.xyz = vec3(u_xlat37) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat4.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat36 = _Gloss * 10.0 + 1.0;
					    u_xlat12.z = exp2(u_xlat36);
					    u_xlat37 = (-_Gloss) + 1.0;
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    }
					    u_xlat38 = u_xlat37 * 0.797884583;
					    u_xlat7.xy = (-vec2(u_xlat37)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat39 = u_xlat37 * u_xlat7.x;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = u_xlat6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xzw = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat39 = u_xlat3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat39 + 1.0;
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xzw = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat6.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = vec3(_Metallic) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat8.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12.x = u_xlat3.x * u_xlat7.y + u_xlat38;
					    u_xlat24 = u_xlat2.x * u_xlat7.y + u_xlat38;
					    u_xlat12.x = u_xlat12.x * u_xlat24 + 9.99999975e-06;
					    u_xlat12.x = float(1.0) / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlat24 = u_xlat37 * u_xlat37;
					    u_xlat0.z = u_xlat24 * u_xlat24;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat24 = 2.0 / u_xlat0.z;
					    u_xlat24 = u_xlat24 + -2.0;
					    u_xlat24 = max(u_xlat24, 9.99999975e-05);
					    u_xlat1.x = u_xlat24 + 2.0;
					    u_xlat1.x = u_xlat1.x * 0.159154937;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat24 = u_xlat0.x * u_xlat24;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat0.z = u_xlat1.x * u_xlat24;
					    u_xlat12.x = u_xlat12.x * u_xlat3.x;
					    u_xlat0.xy = u_xlat0.xz * u_xlat12.zx;
					    u_xlat12.x = u_xlat0.y * 0.785398185;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat36 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    u_xlat36 = u_xlat27 + _Gloss;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat26.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat26.xy = u_xlat26.xy * u_xlat26.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat26.xy;
					    u_xlat9.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat9.xyz + u_xlat6.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat7.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat36 = u_xlat3.y + u_xlat3.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat37 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = u_xlat36 * u_xlat1.x + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat2.y + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat3.x * u_xlat36;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat36);
					    u_xlat36 = (-vs_COLOR0.w) + 1.0;
					    u_xlat36 = u_xlat36 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * _ProjectionParams.z;
					    u_xlat36 = max(u_xlat36, 0.0);
					    u_xlat36 = u_xlat36 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						float _GlowAmount;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat26;
					vec2 u_xlat29;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat41 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat41 = u_xlat41 + u_xlat41;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat41)) + (-u_xlat2.xyz);
					    u_xlat41 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat4.xyz = vec3(u_xlat41) * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat4.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat40 = _Gloss * 10.0 + 1.0;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat41 = (-_Gloss) + 1.0;
					    u_xlatb42 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb42){
					        u_xlatb42 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat42 = u_xlat6.y * 0.25;
					        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat42 = max(u_xlat42, u_xlat43);
					        u_xlat6.x = min(u_xlat44, u_xlat42);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat0);
					        u_xlat7.y = dot(u_xlat8, u_xlat0);
					        u_xlat7.z = dot(u_xlat6, u_xlat0);
					    } else {
					        u_xlat0.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat0);
					        u_xlat7.y = dot(unity_SHAg, u_xlat0);
					        u_xlat7.z = dot(unity_SHAb, u_xlat0);
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat7.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat39 = min(u_xlat8.z, u_xlat39);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat3.xyz;
					    }
					    u_xlat39 = u_xlat41 * 0.797884583;
					    u_xlat8.xy = (-vec2(u_xlat41)) * vec2(0.699999988, 0.797884583) + vec2(1.70000005, 1.0);
					    u_xlat42 = u_xlat41 * u_xlat8.x;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat43 = u_xlat7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat43 + 1.0;
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xzw = u_xlat7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat3.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat42);
					        u_xlat42 = u_xlat3.w + -1.0;
					        u_xlat42 = unity_SpecCube1_HDR.w * u_xlat42 + 1.0;
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + (-u_xlat3.xyz);
					        u_xlat8.xzw = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat3.y = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
					    u_xlat4.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat7.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = vec3(_Metallic) * u_xlat7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat29.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = u_xlat29.xxx * u_xlat4.xyz;
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat13.x = u_xlat3.x * u_xlat8.y + u_xlat39;
					    u_xlat26 = u_xlat2.x * u_xlat8.y + u_xlat39;
					    u_xlat13.x = u_xlat13.x * u_xlat26 + 9.99999975e-06;
					    u_xlat13.x = float(1.0) / u_xlat13.x;
					    u_xlat26 = u_xlat41 * u_xlat41;
					    u_xlat0.z = u_xlat26 * u_xlat26;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 9.99999975e-05));
					    u_xlat26 = 2.0 / u_xlat0.z;
					    u_xlat26 = u_xlat26 + -2.0;
					    u_xlat26 = max(u_xlat26, 9.99999975e-05);
					    u_xlat13.z = u_xlat26 + 2.0;
					    u_xlat13.xz = u_xlat13.xz * vec2(0.25, 0.159154937);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat26 = u_xlat0.x * u_xlat26;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat26 = u_xlat13.z * u_xlat26;
					    u_xlat13.x = u_xlat13.x * u_xlat3.x;
					    u_xlat13.x = u_xlat26 * u_xlat13.x;
					    u_xlat13.x = u_xlat13.x * 0.785398185;
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat40;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					    u_xlat39 = (-u_xlat3.y) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    u_xlat39 = u_xlat29.x + _Gloss;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.00001001);
					    u_xlat29.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat29.xy;
					    u_xlat2.xy = u_xlat2.xy * u_xlat29.xy;
					    u_xlat10.xyz = (-u_xlat7.xyz) + vec3(u_xlat39);
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat10.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat39 = u_xlat3.y + u_xlat3.y;
					    u_xlat39 = u_xlat3.y * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat41 + -0.5;
					    u_xlat1.x = (-u_xlat3.x) + 1.00001001;
					    u_xlat14 = u_xlat1.x * u_xlat1.x;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat1.x = u_xlat14 * u_xlat1.x;
					    u_xlat1.x = u_xlat39 * u_xlat1.x + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat2.y + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat3.x * u_xlat39;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat5.xyz + u_xlat6.xyz;
					    u_xlat39 = (-vs_COLOR0.w) + 1.0;
					    u_xlat39 = u_xlat39 * _GlowAmount;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat9.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    u_xlat39 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * _ProjectionParams.z;
					    u_xlat39 = max(u_xlat39, 0.0);
					    u_xlat39 = u_xlat39 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD_DELTA"
			Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			Blend One One, One One
			GpuProgramID 122443
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD5.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD5.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD5.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD5.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD5.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					out float vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD8 = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD6;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD5.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD2 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD5.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat11));
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat13 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat13, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat5.x = u_xlat1.x * u_xlat1.x;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = 2.0 / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + -2.0;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat9 = u_xlat12 * u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + 2.0;
					    u_xlat5.x = u_xlat5.x * 0.159154937;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat9 = u_xlat1.x * 0.797884583;
					    u_xlat13 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat0.x * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat9 * u_xlat2.x + 9.99999975e-06;
					    u_xlat9 = float(1.0) / u_xlat9;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat9 = u_xlat0.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * 0.785398185;
					    u_xlat5.x = max(u_xlat5.x, 0.0);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat4.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat2.x = u_xlat4.z * u_xlat4.z;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat12 = u_xlat4.z * u_xlat2.x;
					    u_xlat2.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = u_xlat4.x * u_xlat4.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat4.x = u_xlat12 * u_xlat4.x;
					    u_xlat12 = u_xlat0.z + u_xlat0.z;
					    u_xlat8 = u_xlat0.z * u_xlat12;
					    u_xlat8 = u_xlat8 * u_xlat1.x + -0.5;
					    u_xlat4.x = u_xlat8 * u_xlat4.x + 1.0;
					    u_xlat12 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat8 = u_xlat8 * u_xlat12 + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat11));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat11 = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat2.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x + _LightShadowData.x;
					    u_xlat11.x = u_xlat16 * u_xlat11.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec3 u_xlat7;
					float u_xlat9;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD6.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = _Gloss * 10.0 + 1.0;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * vs_TEXCOORD3.xyz;
					    u_xlat1.w = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat20 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.y = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.z = max(u_xlat20, 0.0);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat19 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Gloss) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat20 = 2.0 / u_xlat20;
					    u_xlat20 = u_xlat20 + -2.0;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat20 = u_xlat20 + 2.0;
					    u_xlat20 = u_xlat20 * 0.159154937;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat19 = u_xlat20 * u_xlat19;
					    u_xlat20 = u_xlat18 * 0.797884583;
					    u_xlat3.x = (-u_xlat18) * 0.797884583 + 1.0;
					    u_xlat9 = u_xlat1.y * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat1.x * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat9 + 9.99999975e-06;
					    u_xlat20 = float(1.0) / u_xlat20;
					    u_xlat20 = u_xlat20 * 0.25;
					    u_xlat20 = u_xlat1.x * u_xlat20;
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat19 = u_xlat19 * 0.785398185;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat7.xz = (-u_xlat1.yz) + vec2(1.00001001, 1.0);
					    u_xlat20 = u_xlat7.z * u_xlat7.z;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat19 = u_xlat7.z * u_xlat20;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat19 = u_xlat7.x * u_xlat7.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat7.x = u_xlat19 * u_xlat7.x;
					    u_xlat19 = u_xlat1.z + u_xlat1.z;
					    u_xlat13.x = u_xlat1.z * u_xlat19;
					    u_xlat18 = u_xlat13.x * u_xlat18 + -0.5;
					    u_xlat7.x = u_xlat18 * u_xlat7.x + 1.0;
					    u_xlat13.x = (-u_xlat1.x) + 1.00001001;
					    u_xlat19 = u_xlat13.x * u_xlat13.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13.x = u_xlat19 * u_xlat13.x;
					    u_xlat18 = u_xlat18 * u_xlat13.x + 1.0;
					    u_xlat18 = u_xlat7.x * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat11.x = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat11));
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat13 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat13, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat5.x = u_xlat1.x * u_xlat1.x;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = 2.0 / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + -2.0;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat9 = u_xlat12 * u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + 2.0;
					    u_xlat5.x = u_xlat5.x * 0.159154937;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat9 = u_xlat1.x * 0.797884583;
					    u_xlat13 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat0.x * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat9 * u_xlat2.x + 9.99999975e-06;
					    u_xlat9 = float(1.0) / u_xlat9;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat9 = u_xlat0.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * 0.785398185;
					    u_xlat5.x = max(u_xlat5.x, 0.0);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat4.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat2.x = u_xlat4.z * u_xlat4.z;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat12 = u_xlat4.z * u_xlat2.x;
					    u_xlat2.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = u_xlat4.x * u_xlat4.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat4.x = u_xlat12 * u_xlat4.x;
					    u_xlat12 = u_xlat0.z + u_xlat0.z;
					    u_xlat8 = u_xlat0.z * u_xlat12;
					    u_xlat8 = u_xlat8 * u_xlat1.x + -0.5;
					    u_xlat4.x = u_xlat8 * u_xlat4.x + 1.0;
					    u_xlat12 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat8 = u_xlat8 * u_xlat12 + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat12 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat11));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat11 = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat2.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x + _LightShadowData.x;
					    u_xlat11.x = u_xlat16 * u_xlat11.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec3 u_xlat7;
					float u_xlat9;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD6.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = _Gloss * 10.0 + 1.0;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * vs_TEXCOORD3.xyz;
					    u_xlat1.w = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat20 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.y = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.z = max(u_xlat20, 0.0);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat19 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Gloss) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat20 = 2.0 / u_xlat20;
					    u_xlat20 = u_xlat20 + -2.0;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat20 = u_xlat20 + 2.0;
					    u_xlat20 = u_xlat20 * 0.159154937;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat19 = u_xlat20 * u_xlat19;
					    u_xlat20 = u_xlat18 * 0.797884583;
					    u_xlat3.x = (-u_xlat18) * 0.797884583 + 1.0;
					    u_xlat9 = u_xlat1.y * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat1.x * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat9 + 9.99999975e-06;
					    u_xlat20 = float(1.0) / u_xlat20;
					    u_xlat20 = u_xlat20 * 0.25;
					    u_xlat20 = u_xlat1.x * u_xlat20;
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat19 = u_xlat19 * 0.785398185;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat7.xz = (-u_xlat1.yz) + vec2(1.00001001, 1.0);
					    u_xlat20 = u_xlat7.z * u_xlat7.z;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat19 = u_xlat7.z * u_xlat20;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat19 = u_xlat7.x * u_xlat7.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat7.x = u_xlat19 * u_xlat7.x;
					    u_xlat19 = u_xlat1.z + u_xlat1.z;
					    u_xlat13.x = u_xlat1.z * u_xlat19;
					    u_xlat18 = u_xlat13.x * u_xlat18 + -0.5;
					    u_xlat7.x = u_xlat18 * u_xlat7.x + 1.0;
					    u_xlat13.x = (-u_xlat1.x) + 1.00001001;
					    u_xlat19 = u_xlat13.x * u_xlat13.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13.x = u_xlat19 * u_xlat13.x;
					    u_xlat18 = u_xlat18 * u_xlat13.x + 1.0;
					    u_xlat18 = u_xlat7.x * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat11.x = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat11));
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat13 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat13, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat5.x = u_xlat1.x * u_xlat1.x;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = 2.0 / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + -2.0;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat9 = u_xlat12 * u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + 2.0;
					    u_xlat5.x = u_xlat5.x * 0.159154937;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat9 = u_xlat1.x * 0.797884583;
					    u_xlat13 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat0.x * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat9 * u_xlat2.x + 9.99999975e-06;
					    u_xlat9 = float(1.0) / u_xlat9;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat9 = u_xlat0.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * 0.785398185;
					    u_xlat5.x = max(u_xlat5.x, 0.0);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat4.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat2.x = u_xlat4.z * u_xlat4.z;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat12 = u_xlat4.z * u_xlat2.x;
					    u_xlat2.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = u_xlat4.x * u_xlat4.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat4.x = u_xlat12 * u_xlat4.x;
					    u_xlat12 = u_xlat0.z + u_xlat0.z;
					    u_xlat8 = u_xlat0.z * u_xlat12;
					    u_xlat8 = u_xlat8 * u_xlat1.x + -0.5;
					    u_xlat4.x = u_xlat8 * u_xlat4.x + 1.0;
					    u_xlat12 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat8 = u_xlat8 * u_xlat12 + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat11));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat11 = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat2.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x + _LightShadowData.x;
					    u_xlat11.x = u_xlat16 * u_xlat11.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec3 u_xlat7;
					float u_xlat9;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD6.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = _Gloss * 10.0 + 1.0;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * vs_TEXCOORD3.xyz;
					    u_xlat1.w = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat20 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.y = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.z = max(u_xlat20, 0.0);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat19 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Gloss) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat20 = 2.0 / u_xlat20;
					    u_xlat20 = u_xlat20 + -2.0;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat20 = u_xlat20 + 2.0;
					    u_xlat20 = u_xlat20 * 0.159154937;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat19 = u_xlat20 * u_xlat19;
					    u_xlat20 = u_xlat18 * 0.797884583;
					    u_xlat3.x = (-u_xlat18) * 0.797884583 + 1.0;
					    u_xlat9 = u_xlat1.y * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat1.x * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat9 + 9.99999975e-06;
					    u_xlat20 = float(1.0) / u_xlat20;
					    u_xlat20 = u_xlat20 * 0.25;
					    u_xlat20 = u_xlat1.x * u_xlat20;
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat19 = u_xlat19 * 0.785398185;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat7.xz = (-u_xlat1.yz) + vec2(1.00001001, 1.0);
					    u_xlat20 = u_xlat7.z * u_xlat7.z;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat19 = u_xlat7.z * u_xlat20;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat19 = u_xlat7.x * u_xlat7.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat7.x = u_xlat19 * u_xlat7.x;
					    u_xlat19 = u_xlat1.z + u_xlat1.z;
					    u_xlat13.x = u_xlat1.z * u_xlat19;
					    u_xlat18 = u_xlat13.x * u_xlat18 + -0.5;
					    u_xlat7.x = u_xlat18 * u_xlat7.x + 1.0;
					    u_xlat13.x = (-u_xlat1.x) + 1.00001001;
					    u_xlat19 = u_xlat13.x * u_xlat13.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13.x = u_xlat19 * u_xlat13.x;
					    u_xlat18 = u_xlat18 * u_xlat13.x + 1.0;
					    u_xlat18 = u_xlat7.x * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat11.x = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat11));
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat13 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat13, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat5.x = u_xlat1.x * u_xlat1.x;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = 2.0 / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + -2.0;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat9 = u_xlat12 * u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + 2.0;
					    u_xlat5.x = u_xlat5.x * 0.159154937;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat9 = u_xlat1.x * 0.797884583;
					    u_xlat13 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat0.x * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat9 * u_xlat2.x + 9.99999975e-06;
					    u_xlat9 = float(1.0) / u_xlat9;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat9 = u_xlat0.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * 0.785398185;
					    u_xlat5.x = max(u_xlat5.x, 0.0);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat4.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat2.x = u_xlat4.z * u_xlat4.z;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat12 = u_xlat4.z * u_xlat2.x;
					    u_xlat2.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = u_xlat4.x * u_xlat4.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat4.x = u_xlat12 * u_xlat4.x;
					    u_xlat12 = u_xlat0.z + u_xlat0.z;
					    u_xlat8 = u_xlat0.z * u_xlat12;
					    u_xlat8 = u_xlat8 * u_xlat1.x + -0.5;
					    u_xlat4.x = u_xlat8 * u_xlat4.x + 1.0;
					    u_xlat12 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat8 = u_xlat8 * u_xlat12 + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat12 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat11));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat11 = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat2.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x + _LightShadowData.x;
					    u_xlat11.x = u_xlat16 * u_xlat11.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec3 u_xlat7;
					float u_xlat9;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD6.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = _Gloss * 10.0 + 1.0;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * vs_TEXCOORD3.xyz;
					    u_xlat1.w = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat20 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.y = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.z = max(u_xlat20, 0.0);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat19 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Gloss) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat20 = 2.0 / u_xlat20;
					    u_xlat20 = u_xlat20 + -2.0;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat20 = u_xlat20 + 2.0;
					    u_xlat20 = u_xlat20 * 0.159154937;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat19 = u_xlat20 * u_xlat19;
					    u_xlat20 = u_xlat18 * 0.797884583;
					    u_xlat3.x = (-u_xlat18) * 0.797884583 + 1.0;
					    u_xlat9 = u_xlat1.y * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat1.x * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat9 + 9.99999975e-06;
					    u_xlat20 = float(1.0) / u_xlat20;
					    u_xlat20 = u_xlat20 * 0.25;
					    u_xlat20 = u_xlat1.x * u_xlat20;
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat19 = u_xlat19 * 0.785398185;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat7.xz = (-u_xlat1.yz) + vec2(1.00001001, 1.0);
					    u_xlat20 = u_xlat7.z * u_xlat7.z;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat19 = u_xlat7.z * u_xlat20;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat19 = u_xlat7.x * u_xlat7.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat7.x = u_xlat19 * u_xlat7.x;
					    u_xlat19 = u_xlat1.z + u_xlat1.z;
					    u_xlat13.x = u_xlat1.z * u_xlat19;
					    u_xlat18 = u_xlat13.x * u_xlat18 + -0.5;
					    u_xlat7.x = u_xlat18 * u_xlat7.x + 1.0;
					    u_xlat13.x = (-u_xlat1.x) + 1.00001001;
					    u_xlat19 = u_xlat13.x * u_xlat13.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13.x = u_xlat19 * u_xlat13.x;
					    u_xlat18 = u_xlat18 * u_xlat13.x + 1.0;
					    u_xlat18 = u_xlat7.x * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat11.x = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat11));
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat13 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat13, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat5.x = u_xlat1.x * u_xlat1.x;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = 2.0 / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + -2.0;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat9 = u_xlat12 * u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + 2.0;
					    u_xlat5.x = u_xlat5.x * 0.159154937;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat9 = u_xlat1.x * 0.797884583;
					    u_xlat13 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat0.x * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat9 * u_xlat2.x + 9.99999975e-06;
					    u_xlat9 = float(1.0) / u_xlat9;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat9 = u_xlat0.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * 0.785398185;
					    u_xlat5.x = max(u_xlat5.x, 0.0);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat4.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat2.x = u_xlat4.z * u_xlat4.z;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat12 = u_xlat4.z * u_xlat2.x;
					    u_xlat2.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = u_xlat4.x * u_xlat4.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat4.x = u_xlat12 * u_xlat4.x;
					    u_xlat12 = u_xlat0.z + u_xlat0.z;
					    u_xlat8 = u_xlat0.z * u_xlat12;
					    u_xlat8 = u_xlat8 * u_xlat1.x + -0.5;
					    u_xlat4.x = u_xlat8 * u_xlat4.x + 1.0;
					    u_xlat12 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat8 = u_xlat8 * u_xlat12 + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat11));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat11 = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat2.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x + _LightShadowData.x;
					    u_xlat11.x = u_xlat16 * u_xlat11.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec3 u_xlat7;
					float u_xlat9;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD6.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = _Gloss * 10.0 + 1.0;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * vs_TEXCOORD3.xyz;
					    u_xlat1.w = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat20 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.y = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.z = max(u_xlat20, 0.0);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat19 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Gloss) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat20 = 2.0 / u_xlat20;
					    u_xlat20 = u_xlat20 + -2.0;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat20 = u_xlat20 + 2.0;
					    u_xlat20 = u_xlat20 * 0.159154937;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat19 = u_xlat20 * u_xlat19;
					    u_xlat20 = u_xlat18 * 0.797884583;
					    u_xlat3.x = (-u_xlat18) * 0.797884583 + 1.0;
					    u_xlat9 = u_xlat1.y * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat1.x * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat9 + 9.99999975e-06;
					    u_xlat20 = float(1.0) / u_xlat20;
					    u_xlat20 = u_xlat20 * 0.25;
					    u_xlat20 = u_xlat1.x * u_xlat20;
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat19 = u_xlat19 * 0.785398185;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat7.xz = (-u_xlat1.yz) + vec2(1.00001001, 1.0);
					    u_xlat20 = u_xlat7.z * u_xlat7.z;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat19 = u_xlat7.z * u_xlat20;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat19 = u_xlat7.x * u_xlat7.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat7.x = u_xlat19 * u_xlat7.x;
					    u_xlat19 = u_xlat1.z + u_xlat1.z;
					    u_xlat13.x = u_xlat1.z * u_xlat19;
					    u_xlat18 = u_xlat13.x * u_xlat18 + -0.5;
					    u_xlat7.x = u_xlat18 * u_xlat7.x + 1.0;
					    u_xlat13.x = (-u_xlat1.x) + 1.00001001;
					    u_xlat19 = u_xlat13.x * u_xlat13.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13.x = u_xlat19 * u_xlat13.x;
					    u_xlat18 = u_xlat18 * u_xlat13.x + 1.0;
					    u_xlat18 = u_xlat7.x * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat11.x = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat11));
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat13 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat13, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat5.x = u_xlat1.x * u_xlat1.x;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = 2.0 / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + -2.0;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat9 = u_xlat12 * u_xlat5.x;
					    u_xlat5.x = u_xlat5.x + 2.0;
					    u_xlat5.x = u_xlat5.x * 0.159154937;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat9 = u_xlat1.x * 0.797884583;
					    u_xlat13 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat0.x * u_xlat13 + u_xlat9;
					    u_xlat9 = u_xlat9 * u_xlat2.x + 9.99999975e-06;
					    u_xlat9 = float(1.0) / u_xlat9;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat9 = u_xlat0.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * u_xlat9;
					    u_xlat5.x = u_xlat5.x * 0.785398185;
					    u_xlat5.x = max(u_xlat5.x, 0.0);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat4.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat2.x = u_xlat4.z * u_xlat4.z;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat12 = u_xlat4.z * u_xlat2.x;
					    u_xlat2.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = u_xlat4.x * u_xlat4.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat4.x = u_xlat12 * u_xlat4.x;
					    u_xlat12 = u_xlat0.z + u_xlat0.z;
					    u_xlat8 = u_xlat0.z * u_xlat12;
					    u_xlat8 = u_xlat8 * u_xlat1.x + -0.5;
					    u_xlat4.x = u_xlat8 * u_xlat4.x + 1.0;
					    u_xlat12 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat8 = u_xlat8 * u_xlat12 + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat12 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat11));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat11 = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat2.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat11.xy);
					    u_xlatb11 = 0.0<vs_TEXCOORD6.z;
					    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat2.w * u_xlat11.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat11.x = u_xlat11.x * u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x + _LightShadowData.x;
					    u_xlat11.x = u_xlat16 * u_xlat11.x;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec3 u_xlat7;
					float u_xlat9;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD7.xyz / vs_TEXCOORD7.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD6.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = _Gloss * 10.0 + 1.0;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * vs_TEXCOORD3.xyz;
					    u_xlat1.w = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat20 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.y = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.z = max(u_xlat20, 0.0);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat19 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Gloss) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat20 = 2.0 / u_xlat20;
					    u_xlat20 = u_xlat20 + -2.0;
					    u_xlat20 = max(u_xlat20, 9.99999975e-05);
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat20 = u_xlat20 + 2.0;
					    u_xlat20 = u_xlat20 * 0.159154937;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat19 = u_xlat20 * u_xlat19;
					    u_xlat20 = u_xlat18 * 0.797884583;
					    u_xlat3.x = (-u_xlat18) * 0.797884583 + 1.0;
					    u_xlat9 = u_xlat1.y * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat1.x * u_xlat3.x + u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat9 + 9.99999975e-06;
					    u_xlat20 = float(1.0) / u_xlat20;
					    u_xlat20 = u_xlat20 * 0.25;
					    u_xlat20 = u_xlat1.x * u_xlat20;
					    u_xlat19 = u_xlat19 * u_xlat20;
					    u_xlat19 = u_xlat19 * 0.785398185;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat7.xz = (-u_xlat1.yz) + vec2(1.00001001, 1.0);
					    u_xlat20 = u_xlat7.z * u_xlat7.z;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat19 = u_xlat7.z * u_xlat20;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat19 = u_xlat7.x * u_xlat7.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat7.x = u_xlat19 * u_xlat7.x;
					    u_xlat19 = u_xlat1.z + u_xlat1.z;
					    u_xlat13.x = u_xlat1.z * u_xlat19;
					    u_xlat18 = u_xlat13.x * u_xlat18 + -0.5;
					    u_xlat7.x = u_xlat18 * u_xlat7.x + 1.0;
					    u_xlat13.x = (-u_xlat1.x) + 1.00001001;
					    u_xlat19 = u_xlat13.x * u_xlat13.x;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13.x = u_xlat19 * u_xlat13.x;
					    u_xlat18 = u_xlat18 * u_xlat13.x + 1.0;
					    u_xlat18 = u_xlat7.x * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD6;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat11.x = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat0.x * u_xlat16 + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat2.x + 9.99999975e-06;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlat11.x = u_xlat0.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * u_xlat11.x;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat11.x = _Gloss * 10.0 + 1.0;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat15 = u_xlat15 * u_xlat11.x;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xy);
					    u_xlat11.x = u_xlat2.x * u_xlat3.w;
					    u_xlat2.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat11 = u_xlat11 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD7.xyz,u_xlat11);
					    u_xlat11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Metallic;
						float _Gloss;
						vec4 _Tint;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.z = max(u_xlat16, 0.0);
					    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = log2(u_xlat0.w);
					    u_xlat1.x = (-_Gloss) + 1.0;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + -2.0;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat11 = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 2.0;
					    u_xlat6.x = u_xlat6.x * 0.159154937;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat11 = u_xlat1.x * 0.797884583;
					    u_xlat16 = (-u_xlat1.x) * 0.797884583 + 1.0;
					    u_xlat2.x = u_xlat0.y * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat0.x * u_xlat16 + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat2.x + 9.99999975e-06;
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat11 = u_xlat11 * 0.25;
					    u_xlat11 = u_xlat0.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * u_xlat11;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat11 = _Gloss * 10.0 + 1.0;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat11 = max(abs(vs_TEXCOORD7.y), abs(vs_TEXCOORD7.x));
					    u_xlat11 = max(u_xlat11, abs(vs_TEXCOORD7.z));
					    u_xlat6.y = u_xlat11 + (-_LightProjectionParams.z);
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 9.99999975e-06));
					    u_xlat11 = u_xlat6.y * _LightProjectionParams.w;
					    u_xlat11 = _LightProjectionParams.y / u_xlat11;
					    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat2.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat2.xyz,u_xlat11);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat3.xyz = vs_TEXCOORD7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat3.xyz,u_xlat11);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat11 = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
					    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD6.xyz);
					    u_xlat16 = u_xlat2.x * u_xlat3.w;
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _LightColor0.xyz;
					    u_xlat5.xz = (-u_xlat0.yz) + vec2(1.00001001, 1.0);
					    u_xlat17 = u_xlat5.z * u_xlat5.z;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat5.z * u_xlat17;
					    u_xlat3.xyz = _Tint.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5.x * u_xlat5.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat5.x = u_xlat15 * u_xlat5.x;
					    u_xlat15 = u_xlat0.z + u_xlat0.z;
					    u_xlat10 = u_xlat0.z * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat1.x + -0.5;
					    u_xlat5.x = u_xlat10 * u_xlat5.x + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.00001001;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat2.xyz = vs_COLOR0.xyz * _Tint.xyz;
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
	}
	Fallback "PicaVoxel/PicaVoxel Diffuse"
	CustomEditor "ShaderForgeMaterialInspector"
}