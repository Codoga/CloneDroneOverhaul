<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OverhaulMod</name>
    </assembly>
    <members>
        <member name="M:CDOverhaul.CustomMultiplayer.OverhaulPacket.Handle">
            <summary>
            Called when we receive the packet
            </summary>
        </member>
        <member name="M:CDOverhaul.CustomMultiplayer.OverhaulMultiplayerController.StartMultiplayer(CDOverhaul.CustomMultiplayer.EOverhaulMultiplayerMode,System.Boolean,System.Int32)">
            <summary>
            Create a lobby
            </summary>
        </member>
        <member name="M:CDOverhaul.CustomMultiplayer.OverhaulMultiplayerController.JoinLobby(Steamworks.CSteamID)">
            <summary>
            Join specific lobby
            </summary>
            <param name="lobbyId"></param>
        </member>
        <member name="P:CDOverhaul.CustomMultiplayer.OverhaulMultiplayerLobby.OwnerUserID">
            <summary>
            The SteamID of lobby owner
            </summary>
        </member>
        <member name="P:CDOverhaul.CustomMultiplayer.OverhaulMultiplayerLobby.LocalUserID">
            <summary>
            The SteamID of local user
            </summary>
        </member>
        <member name="T:CDOverhaul.Gameplay.Combat.FirstPersonMoverModdedAnimationsController">
            <summary>
            Allows managing animations, that are not in game
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.Combat.OverhaulAdvancedCharacterExpansion.Default_Player_Speed">
            <summary>
            The speed of every player in the game
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.Combat.OverhaulAdvancedCharacterExpansion.Default_Enemy_Speed">
            <summary>
            The speed of any robot in the game
            </summary>
        </member>
        <member name="P:CDOverhaul.Gameplay.Combat.OverhaulAdvancedCharacterExpansion.CharacterModel">
            <summary>
            Get cached character model instance
            </summary>
        </member>
        <member name="P:CDOverhaul.Gameplay.Combat.OverhaulAdvancedCharacterExpansion.HasCharacterModel">
            <summary>
            Check if we have cached character model
            </summary>
        </member>
        <member name="M:CDOverhaul.Gameplay.Combat.OverhaulAdvancedCharacterExpansion.GetAnimator(CDOverhaul.Gameplay.Combat.FirstPersonMoverAnimatorType)">
            <summary>
            Get animator script instance if we have one
            </summary>
            <param name="animatorType"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.Combat.OverhaulAdvancedCharacterExpansion.HasAnimator(CDOverhaul.Gameplay.Combat.FirstPersonMoverAnimatorType)">
            <summary>
            Check if we have animator of specified type
            </summary>
            <param name="animatorType"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.Combat.OverhaulAdvancedCharacterExpansion.GetAnimatorSpeed(CDOverhaul.Gameplay.Combat.FirstPersonMoverAnimatorType)">
            <summary>
            Get speed of specific character model animator
            </summary>
            <param name="animatorType"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.Combat.OverhaulAdvancedCharacterExpansion.SetAnimatorSpeed(CDOverhaul.Gameplay.Combat.FirstPersonMoverAnimatorType,System.Single)">
            <summary>
            Set speed of specific character model animator
            </summary>
            <param name="animatorType"></param>
            <param name="value"></param>
        </member>
        <member name="F:CDOverhaul.Gameplay.Outfits.OutfitItem.Offsets">
            <summary>
            Character model names - Offset
            </summary>
        </member>
        <member name="M:CDOverhaul.Gameplay.Outfits.OutfitItem.NewAccessory(System.String,System.String)">
            <summary>
            Create instance of accessory item including its name, description and type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="description"></param>
            <param name="partType"></param>
            <returns></returns>
        </member>
        <member name="T:CDOverhaul.Gameplay.Pets.PetBehaviourSettings">
            <summary>
            Customize pet's behaviour
            </summary>
        </member>
        <member name="T:CDOverhaul.Gameplay.WeaponSkins.WeaponSkinsController">
            <summary>
            Another new skins controller that should work better this time
            </summary>
        </member>
        <member name="T:CDOverhaul.Gameplay.MultipartWeaponBehaviour">
            <summary>
            By Zerkie#5342
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildController.AutoUpgradeSequences">
            <summary>
            All possible auto upgrade types
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.None">
            <summary>
            Auto-Build disabled
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.Random">
            <summary>
            Random build
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.FullSword">
            <summary>
            Sword unlock + Fire sword 1 +  Fire sword 2
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.FullBow">
            <summary>
            Bow unlock + Fire arrows 1 + Arrow width 1
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.FullHammer">
            <summary>
            Hammer unlock + Hammer size 1 + Hammer size 2
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.FullSpear">
            <summary>
            Spear unlock + Shield + Fire spear
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.Kicker">
            <summary>
            Kick + Power kick + Energy capacity 1 + Energy capacity 2
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.LightKicker">
            <summary>
            Kick + Get up  + Energy capacity 1 + Energy capacity 2
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.ArmoredKicker">
            <summary>
            Kick + Armor
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.KickNDash">
            <summary>
            Kick + Energy capacity 1 + Energy capacity 2 +  Energy capacity 3
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.KickNRun">
            <summary>
            Kick + Jetpack + Energy capacity 1
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.TacticalSword">
            <summary>
            Sword unlock + Energy capacity 1 + Kick 1
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.TacticalFireSword">
            <summary>
            Sword unlock + Fire sword 1 + Energy capacity 1
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.JetPackSword">
            <summary>
            Sword unlock + Jetpack
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.TacticalBow">
            <summary>
            Bow unlock + Arrow width 1 + Energy capacity 1 + Kick
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.TacticalFireBow">
            <summary>
            Bow unlock + Fire arrows 1 + Energy capacity 1 + Kick
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.TacticalFireSpear">
            <summary>
            Spear unlock + Fire spear + Energy capacity 1
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.TacticalFireSpearKicker">
            <summary>
            Spear unlock + Fire spear + Kick
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.TacticalHammer">
            <summary>
            Hammer unlock + Hammer size 1 + Energy capacity 1
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.TacticalHammerKicker">
            <summary>
            Hammer unlock + Hammer size 1 + Kick
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.QualityOfLife.AutoBuildVariant.Spectator">
            <summary>
            Energy capacity 1 + Energy capacity 2 +  Energy capacity 3 + Energy recharge 1
            </summary>
        </member>
        <member name="T:CDOverhaul.Gameplay.IWeaponSkinsControllerV2">
            <summary>
            Gonna test new way of controller impementation
            </summary>
        </member>
        <member name="M:CDOverhaul.Gameplay.IWeaponSkinsControllerV2.NewSkinItem(WeaponType,System.String,CDOverhaul.Gameplay.ItemFilter)">
            <summary>
            Create instance of weapon skin item. To set skin models, call <see cref="!:IWeaponSkinItemDefinition.SetModel(GameObject, bool, bool)"/>.
            </summary>
            <param name="weapon"></param>
            <param name="skinName"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.IWeaponSkinsControllerV2.GetSkinItem(WeaponType,System.String,CDOverhaul.Gameplay.ItemFilter,CDOverhaul.Gameplay.ItemNullResult@)">
            <summary>
            Get specific weapon skin item using <paramref name="weaponType"/> and <paramref name="filter"/>.
            If result is <b>NULL</b>, checking <paramref name="error"/> would be nice idea
            </summary>
            <param name="weaponType"></param>
            <param name="skinName"></param>
            <param name="filter"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.IWeaponSkinsControllerV2.GetSkinItems(CDOverhaul.Gameplay.ItemFilter,WeaponType)">
            <summary>
            Get all weapon skins that match <paramref name="filter"/> parameter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.IWeaponSkinsControllerV2.GetSkinItems(FirstPersonMover)">
            <summary>
            Get all weapon skins that <paramref name="firstPersonMover"/> is allowed to use
            </summary>
            <param name=""></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.IWeaponSkinItemDefinition.SetModel(UnityEngine.GameObject,OverhaulAPI.ModelOffset,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Set model for specific variant of weapon skin
            </summary>
            <param name="prefab"></param>
            <param name="fire"></param>
            <param name="multiplayer"></param>
        </member>
        <member name="M:CDOverhaul.Gameplay.IWeaponSkinItemDefinition.GetModel(System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Get model
            </summary>
            <param name="fire"></param>
            <param name="multiplayer"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.IWeaponSkinItemDefinition.SetFilter(CDOverhaul.Gameplay.ItemFilter)">
            <summary>
            TBA
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:CDOverhaul.Gameplay.IWeaponSkinItemDefinition.GetFilter">
            <summary>
            TBA
            </summary>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.IWeaponSkinItemDefinition.SetWeaponType(WeaponType)">
            <summary>
            TBA
            </summary>
            <param name="weaponType"></param>
        </member>
        <member name="M:CDOverhaul.Gameplay.IWeaponSkinItemDefinition.GetWeaponType">
            <summary>
            TBA
            </summary>
            <returns></returns>
        </member>
        <member name="F:CDOverhaul.Gameplay.WeaponSkinItemDefinitionV2.m_WeaponType">
            <summary>
            Weapon type
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.WeaponSkinItemDefinitionV2.m_SkinFilter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.WeaponSkinItemDefinitionV2.m_SkinName">
            <summary>
            Skin name
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.WeaponSkinItemDefinitionV2.m_ExclusivePlayerID">
            <summary>
            Exclusivity
            </summary>
        </member>
        <member name="F:CDOverhaul.Gameplay.WeaponSkinItemDefinitionV2.m_Models">
            <summary>
            Models
            </summary>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsController.AddSkinQuick(WeaponType,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add a skin definition
            </summary>
            <param name="weaponType"></param>
            <param name="name"></param>
            <param name="author"></param>
            <param name="singleplayerNormalModel"></param>
            <param name="singleplayerFireModel"></param>
            <param name="multiplayerNormalModel"></param>
            <param name="multiplayerFireModel"></param>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsController.SetSkinModelOffsetQuick(OverhaulAPI.ModelOffset,System.Boolean,System.Boolean)">
            <summary>
            Set recently skin model offset
            </summary>
            <param name="offset"></param>
            <param name="fire"></param>
            <param name="multiplayer"></param>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsController.SetSkinExclusiveQuick(System.String)">
            <summary>
            Mark recently added skin as exclusive
            </summary>
            <param name="playerIds"></param>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsController.SetSkinColorParametersQuick(System.Boolean,System.Int32,System.Boolean,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Set color parameters of recently added skin
            </summary>
            <param name="applyFavColorNormal"></param>
            <param name="forcedColorIndexNormal"></param>
            <param name="applyFavColorFire"></param>
            <param name="forcedColorIndexFire"></param>
            <param name="saturation"></param>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsController.SetSkinMiscParametersQuick(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set misc parameters of recently added skin
            </summary>
            <param name="singleplayerVariantInMultiplayer"></param>
            <param name="vanillaBowStrings"></param>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsController.SetSkinDescriptionQuick(System.String)">
            <summary>
            Set recently added skin description
            </summary>
            <param name="descriptionFilename"></param>
        </member>
        <member name="F:CDOverhaul.Gameplay.WeaponSkinsWearer.SpawnedSkins">
            <summary>
            The collection of all instantiated skins
            </summary>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsWearer.GetWeaponSkinSpawnInfo(WeaponType)">
            <summary>
            Get spawn info knowing only the <see cref="T:WeaponType"/>
            </summary>
            <param name="weaponType"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsWearer.GetWeaponSkinSpawnInfo(WeaponModel)">
            <summary>
            Get spawn info knowing only the <see cref="T:WeaponModel"/>
            </summary>
            <param name="weaponModel"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsWearer.GetWeaponSkinSpawnInfo(CDOverhaul.Gameplay.IWeaponSkinItemDefinition)">
            <summary>
            Get spawn info knowing only the <see cref="T:CDOverhaul.Gameplay.IWeaponSkinItemDefinition"/>
            </summary>
            <param name="weaponSkinItemDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsWearer.GetEquippedWeaponSkinSpawnInfo">
            <summary>
            Get skin spawn info of currently equipped weapon
            </summary>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsWearer.GetEquippedWeaponSkinSpawnInfoDirectly(FirstPersonMover)">
            <summary>
            Static variant of <see cref="M:CDOverhaul.Gameplay.WeaponSkinsWearer.GetEquippedWeaponSkinSpawnInfo"/>, Get skin spawn info of currently equipped weapon
            </summary>
            <param name="mover"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.WeaponSkinsWearer.GetEquippedWeaponSkinItemDirectly(FirstPersonMover)">
            <summary>
            Get skin item definition of currently equipped weapon
            </summary>
            <param name="mover"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.Gameplay.OverhaulGameplayCoreController.sendGamemodeUpdatedEvent">
            <summary>
            Send <see cref="F:CDOverhaul.Gameplay.OverhaulGameplayCoreController.GamemodeChangedEventString"/> event
            </summary>
        </member>
        <member name="T:CDOverhaul.HUD.OverhaulPersonalizationPanel">
            <summary>
            An updated version of <see cref="T:CDOverhaul.HUD.PersonalizationMenu"/> to be implemented in 0.3 updates/0.4
            </summary>
        </member>
        <member name="T:CDOverhaul.HUD.PersonalizationMenu">
            <summary>
            Used for outfits and skins menus
            </summary>
        </member>
        <member name="F:CDOverhaul.HUD.OverhaulCanvasController.OverhaulHUDName">
            <summary>
            The prefab name of HUD
            </summary>
        </member>
        <member name="P:CDOverhaul.HUD.OverhaulCanvasController.HUDModdedObject">
            <summary>
            The modded object with all UI references
            </summary>
        </member>
        <member name="M:CDOverhaul.HUD.OverhaulCanvasController.AddHUD``1(ModdedObject)">
            <summary>
            Add new HUD controller to <paramref name="moddedObject"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="moddedObject"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.HUD.OverhaulCanvasController.GetHUDPrefab(System.String@)">
            <summary>
            TBA
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.HUD.OverhaulCanvasController.ParentTransformToGameUIRoot(UnityEngine.Transform@)">
            <summary>
            Parent transform to <see cref="T:GameUIRoot"/>.Instance.transform and instantly fix position and scale
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:CDOverhaul.HUD.OverhaulCanvasController.SetCanvasPixelPerfect(System.Boolean@)">
            <summary>
            Set <see cref="P:UnityEngine.Canvas.pixelPerfect"/> value in <see cref="T:GameUIRoot"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CDOverhaul.Workshop.OverhaulSteamBrowser.GetItemVoteInfo(Steamworks.PublishedFileId_t,System.Action{System.Boolean,System.Boolean,System.Boolean,System.Boolean})">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="callback">1 - Skipped, 2 - Up, 3 - Down, 4 - Fail</param>
        </member>
        <member name="M:CDOverhaul.Workshop.OverhaulWorkshopBrowserUI.OnGetWorkshopItems(CDOverhaul.Workshop.OverhaulWorkshopRequestResult)">
            <summary>
            Called when our steam workshop request is done
            </summary>
            <param name="requestResult"></param>
        </member>
        <member name="F:CDOverhaul.OverhaulDiscordController.ApplicationID">
            <summary>
            Overhaul mod Discord App ID
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulDiscordController.CurrentGamemode">
            <summary>
            The gamemode player is playing right now
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulDiscordController.CurrentGamemodeDetails">
            <summary>
            The details of gamemode (Progress for example)
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulDiscordController.DestroyDiscord">
            <summary>
            Destroying discord will result app quit
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulDiscordController.updateCurrentGamemodeInfo">
            <summary>
            Update <see cref="P:CDOverhaul.OverhaulDiscordController.CurrentGamemode"/> value
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulDiscordController.updatedDetailsInfo">
            <summary>
            Update <see cref="P:CDOverhaul.OverhaulDiscordController.CurrentGamemodeDetails"/> value
            </summary>
        </member>
        <member name="M:CDOverhaul.Patches.OptimizeRuntime.CollectGarbage">
            <summary>
            Reduce memory usage as much as possible
            </summary>
        </member>
        <member name="T:CDOverhaul.Patches.ReplacementBase">
            <summary>
            This was made to patch the game without using HarmonyPatch
            </summary>
        </member>
        <member name="P:CDOverhaul.Patches.ReplacementBase.HasReplaced">
            <summary>
            Check if replacement is working
            </summary>
        </member>
        <member name="P:CDOverhaul.Patches.ReplacementBase.SuccessfullyPatched">
            <summary>
            This value doesn't affect anything, use it for marking fine working patches
            </summary>
        </member>
        <member name="M:CDOverhaul.Patches.ReplacementBase.Replace">
            <summary>
            Do patch
            </summary>
        </member>
        <member name="M:CDOverhaul.Patches.ReplacementBase.Cancel">
            <summary>
            Revert patch changes, called when mod is disabled
            </summary>
        </member>
        <member name="T:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild">
            <summary>
            Features that doesn't require player IDs to work. This class defines what things should be included in the build
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_SELECTION_OUTLINE_ENABLED">
            <summary>
            Level editor selection outline
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_SKIN_SWITCHING_VFX_ENABLED">
            <summary>
            VFX that plays when switching skins
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_CUSTOM_MULTIPLAYER_TEST_ENABLED">
            <summary>
            Allow creating private matches with additional things allowed
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_NEW_SAVE_AND_LOAD_SYSTEM_ENABLED">
            <summary>
            Better way of saving/loading levels
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.APPLY_THEME_COLOR_ON_SETTINGS">
            <summary>
            Make tickboxes use player favourite color
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_VIEW_MODES_SETTING_ENABLED">
            <summary>
            First person mode
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_BOOT_SCREEN_ENABLED">
            <summary>
            Startup screen
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_DISCORD_PANEL_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.ARE_TOOLTIPS_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_OVERHAULED_GAMEMODES_UI_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_AUDIO_REVERB_FILTER_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_FIRST_USE_SETUP_UI_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_COMBAT_OVERHAUL_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.ARE_ROBOT_EFFECTS_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_NEW_TRANSITION_SCREEN_ENABLED">
            <summary>
            Enable the transition initially used in prototype builds
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.ARE_ENERGY_UI_IMPROVEMENTS_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_NEW_WORKSHOP_BROWSER_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_PETS_DEMO">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.ALLOW_REVERTING_UPGRADES">
            <summary>
            Revert upgrade by right click
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_VANILLA_LVL_EDITOR_UI_OVERHAUL_ENABLED">
            <summary>
            Do some changes to usual level editor UI
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_FULL_LVL_EDITOR_UI_OVERHAUL_ENABLED">
            <summary>
            Overhaul level editor UI completely
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_PHOTO_MODE_OVERHAUL_ENABLED">
            <summary>
            More functional photo mode
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_GPU_INSTANCING_ENABLED">
            <summary>
            A way to optimize huge levels
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_GAMEMODESELECTSCREEN_REDESIGN_ENABLED">
            <summary>
            The redesign of game mode select screen
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_ARENA_OVERHAUL_ENABLED">
            <summary>
            Arena overhaul
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_ADDITIONAL_CONTENT_SUPPORT_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_ACHIEVEMENTS_MENU_REDESIGN_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_CONNECTION_SCREENS_REDESIGN_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_NEW_PLAYER_INFO_SYNC_MECHANISM_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.IS_NEW_WEAPON_SKINS_SYSTEM_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulFeatureAvailabilitySystem.ImplementedInBuild.ARE_NEW_PERSONALIZATION_CATEGORIES_ENABLED">
            <summary>
            
            </summary>
        </member>
        <member name="T:CDOverhaul.OverhaulBehaviour">
            <summary>
            MonoBehaviour class that replaces usual <see cref="T:UnityEngine.MonoBehaviour"/>
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulExtensions.ToColor(System.String)">
            <summary>
            Get color using hex
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulExtensions.ToSprite(UnityEngine.Texture2D)">
            <summary>
            Create sprite from texture
            </summary>
            <param name="texture2D"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulExtensions.GetObject``1(ModdedObject,System.Int32@)">
            <summary>
            Get a component of object with given index
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="moddedObject"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulExtensions.GetAllChallengeLevelDescriptions(LevelManager)">
            <summary>
            Get all levels related to challenges
            </summary>
            <param name="levelManager"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulExtensions.GetChallengeLevelDescriptions(LevelManager,System.String)">
            <summary>
            Get all challenge levels
            </summary>
            <param name="levelManager"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulExtensions.GetLevelDescriptions(LevelManager,System.Byte)">
            <summary>
            Todo: Finish this method
            </summary>
            <param name="levelManager"></param>
            <param name="index">0 - Story mode levels<br></br>1 - Endless mode levels</param>
            <returns></returns>
        </member>
        <member name="T:CDOverhaul.OverhaulSessionController">
            <summary>
            Used to store static values
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulCharacterExpansion.Owner">
            <summary>
            Owner of the expansion script
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulCharacterExpansion.UpgradeCollection">
            <summary>
            Owner's upgrade collection
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulCharacterExpansion.EnergySource">
            <summary>
            Owner's energy source
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulCharacterExpansion.IsPressed(UnityEngine.KeyCode,System.Byte)">
            <summary>
            Check if user, if <paramref name="type"/> is 0 - pressed key this frame, 1 - holding the key, 2 - ended pressing key this frame
            </summary>
            <param name="code"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulCharacterExpansion.OnPreCommandExecute(FPMoveCommand)">
            <summary>
            May be the best way to control character movement
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:CDOverhaul.OverhaulExceptions">
            <summary>
            The exceptions that should occur only while testing!
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulExceptions.ThrowException(System.String@,System.String@)">
            <summary>
            Just throw an exception
            </summary>
            <param name="exc"></param>
            <param name="message"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:CDOverhaul.OverhaulExceptions.OnModEarlyCrash(System.String@)">
            <summary>
            Called when game crashed too early
            </summary>
            <param name="exc"></param>
        </member>
        <member name="P:CDOverhaul.SettingInfo.RawPath">
            <summary>
            <b>Example: </b>Category.Section.Setting
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulSettingsController.SettingChangedEventString">
            <summary>
            This event is sent if any setting value has changed
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulSettingsController.SettingEventDispatcherFlag">
            <summary>
            If the default value of a setting equals this one, the setting will be shown as button in UI
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulSettingsController.m_Settings">
            <summary>
            All existing settings
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulSettingsController.m_HiddenEntries">
            <summary>
            Categories, sections and settings to be hidden in settings menu
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulSettingsController.m_CachedCategoryIcons">
            <summary>
            Loaded images from Assets/Settings/Ico directory
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulSettingsController.HUD">
            <summary>
            UI instance
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulSettingsController.AddSetting``1(System.String@,``0@,System.Reflection.FieldInfo@,CDOverhaul.OverhaulUpdatedSetting@)">
            <summary>
            Add a setting and get full info about one
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <param name="defaultValue"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulSettingsController.GetAllCategories(System.Boolean@)">
            <summary>
            Get all available categories including hidden if <paramref name="includeHidden"/> is true
            </summary>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulSettingsController.GetAllSections(System.String@,System.Boolean@)">
            <summary>
            Get all available sections under category including hidden if <paramref name="includeHidden"/> is true
            </summary>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulSettingsController.GetAllSettings(System.String@,System.String@,System.Boolean@)">
            <summary>
            Get all available settings including hidden if <paramref name="includeHidden"/> is true
            </summary>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulSettingsController.GetSetting(System.String@,System.Boolean@)">
            <summary>
            Get setting info by typing path
            </summary>
            <param name="path"></param>
            <param name="includeHidden"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulSettingsController.IsEntryHidden(System.String@)">
            <summary>
            Check if the setting is hidden
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="F:CDOverhaul.OverhaulAssetsController.m_LoadedAssetBundles">
            <summary>
            All loaded assets into memory
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulAssetsController.m_LoadingAssetBundles">
            <summary>
            The list of loading asset bundles at the moment
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulAssetsController.TryLoadAssetBundle(System.String@,System.Boolean)">
            <summary>
            Try load an asset bundle if one exists
            </summary>
            <param name="pathUnderModFolder"></param>
            <returns><b>True</b> if asset bundle has been successfully loaded</returns>
        </member>
        <member name="M:CDOverhaul.OverhaulAssetsController.LoadAssetBundleAsync(System.String@,System.Action{CDOverhaul.OverhaulAssetsController.AssetBundleLoadHandler},System.Boolean)">
            <summary>
            Load asset bundle async
            </summary>
            <param name="pathUnderModFolder"></param>
            <param name="doneCallback"></param>
            <returns><see cref="T:CDOverhaul.OverhaulAssetsController.AssetLoadHandler"/> containing progress variable</returns>
        </member>
        <member name="M:CDOverhaul.OverhaulAssetsController.TryUnloadAssetBundle(System.String@,System.Boolean@)">
            <summary>
            Unload an asset bundle from memory
            </summary>
            <param name="pathUnderModFolder"></param>
            <param name="unloadObjects">Destroy loaded objects to free memory</param>
            <returns><b>True</b> if asset bundle has been successfully unloaded</returns>
        </member>
        <member name="M:CDOverhaul.OverhaulAssetsController.LoadAssetBundleIfNotLoaded(System.String@,System.Boolean)">
            <summary>
            Try load an asset bundle if one isn't loaded
            </summary>
            <param name="pathUnderModFolder"></param>
            <returns><b>True</b> if asset bundle has been loaded</returns>
        </member>
        <member name="M:CDOverhaul.OverhaulAssetsController.DoesAssetBundleExist(System.String@)">
            <summary>
            Check if there's specific asset bundle on disk under mod directory
            </summary>
            <param name="assetBundleUnderModDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulAssetsController.HasLoadedAssetBundle(System.String@)">
            <summary>
            Check if specified asset bundle is already loaded into memory and can be used
            </summary>
            <param name="assetBundleName"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulAssetsController.IsLoadingAssetBundle(System.String@)">
            <summary>
            Check if specified asset bundle is being loaded async-ly
            </summary>
            <param name="assetBundleName"></param>
            <returns></returns>
        </member>
        <member name="F:CDOverhaul.OverhaulDataBase.IsLoadedFromFile">
            <summary>
            Define if this container base was loaded from file
            </summary>
        </member>
        <member name="T:CDOverhaul.OverhaulDataController">
            <summary>
            A simplified interaction with <see cref="T:DataRepository"/><br>Todo: Cleanup code</br>
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulDataController.SaveData(System.Object,System.String@,System.Boolean@,System.String@)">
            <summary>
            Save data as .json file
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataContainer"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:CDOverhaul.OverhaulDataController.GetData``1(System.String@,System.Boolean@,System.String@)">
            <summary>
            Load data from disk
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:CDOverhaul.OverhaulController">
            <summary>
            The base class of any controller in this mod.
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulController.Error">
            <summary>
            Check if an exception occurred while initializing the controller.
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulController.Initialize">
            <summary>
            Called at the same time when controller is created.
            It is better to set up thing here.
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulController.OnModDeactivated">
            <summary>
            Called when mod was deactivated.
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulController.InitializeStatic(UnityEngine.GameObject@)">
            <summary>
            Initialize static fields
            </summary>
            <param name="controllersGO"></param>
        </member>
        <member name="M:CDOverhaul.OverhaulController.AddController``1(UnityEngine.Transform@)">
            <summary>
            Create and initialize new controller
            </summary>
            <typeparam name="T"></typeparam>
            <param name="transformOverride"></param>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulController.GetController``1">
            <summary>
            Get controller instance by its type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.OverhaulController.RemoveController(CDOverhaul.OverhaulController)">
            <summary>
            Remove controller from existing controllers dictionary
            </summary>
            <param name="controllerInstance"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:CDOverhaul.OverhaulUI">
            <summary>
            The base class of any HUD in the mod
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulUI.MyModdedObject">
            <summary>
            The instance of <see cref="T:ModdedObject"/>
            <b>Note: gameobject with this script must have <see cref="T:ModdedObject"/></b>
            </summary>
        </member>
        <member name="M:CDOverhaul.EnableCursorController.AddCondition">
            <summary>
            Make the game understand that cursor should be enabled until you remove condition (<see cref="!:EnableCursorController.RemoveCondition(in int)"/>) the ID which we got from this method
            </summary>
            <returns></returns>
        </member>
        <member name="M:CDOverhaul.EnableCursorController.RemoveCondition(System.Byte@)">
            <summary>
            Remove condition with ID
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:CDOverhaul.OverhaulEventsController">
            <summary>
            A simplified interaction with <see cref="T:GlobalEventManager"/> (not really)
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulEventsController.EventPrefix">
            <summary>
            This prefix is automatically added to any of mod events
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulEventsController.MayAddListeners">
            <summary>
            Check if <see cref="T:GlobalEventManager"/> instance is not <b>Null</b> (for some reason)
            </summary>
        </member>
        <member name="T:CDOverhaul.OverhaulMod">
            <summary>
            The base class of the mod. Launches the mod
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulMod.ModDeactivatedEventString">
            <summary>
            An event that is called when mod was deactivated by user
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulMod.IsModInitialized">
            <summary>
            Returns <b>True</b> if <b><see cref="P:CDOverhaul.OverhaulMod.Core"/></b> is not <b>Null</b>
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulMod.IsLoadedIncorrectly">
            <summary>
            Define if we got errors while starting up the mod
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulMod.Core">
            <summary>
            The instance of the core
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulMod.Base">
            <summary>
            The instance of main mod class
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulMod.OnModLoaded">
            <summary>
            Create core when mod was loaded
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulMod.OnModEnabled">
            <summary>
            Create core when mod was loaded or enabled
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulMod.OnModDeactivated">
            <summary>
            Destroy the when mod was deactivated
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulMod.OnFirstPersonMoverSpawned(FirstPersonMover)">
            <summary>
            Used for events
            </summary>
            <param name="firstPersonMover"></param>
        </member>
        <member name="M:CDOverhaul.OverhaulMod.TryInstantiateCore">
            <summary>
            Create the instance of mod core
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulMod.DestroyCore">
            <summary>
            Destroy the instance of the core
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulMod.waitForRobotInitializationAndDispatchEvent(FirstPersonMover)">
            <summary>
            Wait until all things are initialized in <see cref="T:FirstPersonMover"/> and dispatch event if robot isn't null
            </summary>
            <param name="firstPersonMover"></param>
            <returns></returns>
        </member>
        <member name="P:CDOverhaul.OverhaulCore.ModDirectory">
            <summary>
            The mod directory path.
            Ends with '/'
            </summary>
        </member>
        <member name="P:CDOverhaul.OverhaulCore.CanvasController">
            <summary>
            The UI controller instance
            </summary>
        </member>
        <member name="T:CDOverhaul.OverhaulEvent">
            <summary>
            A definition of event that has listeners
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulEvent.EventName">
            <summary>
            Event name
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulEvent.WithPrefix">
            <summary>
            Is it not a vanilla event?
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulEvent.EventAction">
            <summary>
            What function should be called
            </summary>
        </member>
        <member name="F:CDOverhaul.OverhaulEvent.EventActionWithArgument">
            <summary>
            What function with arguments should be called
            </summary>
        </member>
        <member name="M:CDOverhaul.OverhaulEvent.SetArgument``1(System.Action{``0})">
            <summary>
            Mark event as one that requires arguments
            </summary>
            <typeparam name="T"></typeparam>
            <param name="delegate"></param>
        </member>
        <member name="M:CDOverhaul.OverhaulEvent.Equals(CDOverhaul.OverhaulEvent@,CDOverhaul.OverhaulEvent@)">
            <summary>
            Compare 2 events
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Discord.NetworkManager.GetPeerId">
            <summary>
            Get the local peer ID for this process.
            </summary>
        </member>
        <member name="M:Discord.NetworkManager.Flush">
            <summary>
            Send pending network messages.
            </summary>
        </member>
        <member name="M:Discord.NetworkManager.OpenPeer(System.UInt64,System.String)">
            <summary>
            Open a connection to a remote peer.
            </summary>
        </member>
        <member name="M:Discord.NetworkManager.UpdatePeer(System.UInt64,System.String)">
            <summary>
            Update the route data for a connected peer.
            </summary>
        </member>
        <member name="M:Discord.NetworkManager.ClosePeer(System.UInt64)">
            <summary>
            Close the connection to a remote peer.
            </summary>
        </member>
        <member name="M:Discord.NetworkManager.OpenChannel(System.UInt64,System.Byte,System.Boolean)">
            <summary>
            Open a message channel to a connected peer.
            </summary>
        </member>
        <member name="M:Discord.NetworkManager.CloseChannel(System.UInt64,System.Byte)">
            <summary>
            Close a message channel to a connected peer.
            </summary>
        </member>
        <member name="M:Discord.NetworkManager.SendMessage(System.UInt64,System.Byte,System.Byte[])">
            <summary>
            Send a message to a connected peer over an opened message channel.
            </summary>
        </member>
    </members>
</doc>
